"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –¥–ª—è Dream Analysis Bot
"""
import os
import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.user import handle_message, handle_voice_message
from handlers.profile import start_command, handle_profile_callbacks, handle_info_callbacks, send_start_menu
from handlers.admin import admin_panel_command, cancel_command, handle_admin_callbacks, handle_admin_broadcast_content, admin_broadcast_states
from handlers.diary import handle_diary_callbacks

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from core.config import TELEGRAM_TOKEN, SECRET_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-app.railway.app/webhook
PORT = int(os.getenv("PORT", 8000))

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

# –°–æ–∑–¥–∞–µ–º Telegram Application
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()


async def main_button_handler(update, context):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    from core.database import db
    db.log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if query.data == "main_menu":
        try:
            await query.delete_message()
        except Exception:
            pass
        await send_start_menu(query.message.chat_id, context, update.effective_user)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if query.data in ["start_profile", "profile_step:gender", "profile_step:skip", "about", "donate", "start_first_dream"] or \
       query.data.startswith(("gender:", "age:", "lucid:")):
        if query.data in ["about", "donate", "start_first_dream"]:
            await handle_info_callbacks(update, context, query.data)
        else:
            await handle_profile_callbacks(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–æ–≤
    if query.data.startswith(("diary_page:", "dream_view:", "dream_delete")):
        await handle_diary_callbacks(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫
    if query.data.startswith("save_dream:"):
        await handle_save_dream_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if query.data.startswith("astrological:"):
        await handle_astrological_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if query.data.startswith("astrological_date:"):
        await handle_astrological_date_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    if query.data == "cancel_date_input":
        await handle_cancel_date_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    if query.data.startswith(("admin_", "broadcast_confirm")):
        await handle_admin_callbacks(update, context, query.data)
        return


async def handle_save_dream_callback(update, context, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤'"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ë–î
        from core.database import db
        pending_dream = db.get_pending_dream(chat_id)
        print(f"üîç DEBUG: pending_dream –∏–∑ –ë–î = {pending_dream}")
        
        if not pending_dream:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º source_type –∏–∑ callback_data
        source_type = callback_data.split(":")[1]
        print(f"üîç DEBUG: handle_save_dream_callback - callback_data = {callback_data}, source_type = {source_type}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫
        from core.database import db
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        has_astrological = pending_dream.get('astrological_interpretation') is not None
        
        if has_astrological:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ
            dream_saved = db.save_dream(
                chat_id=chat_id,
                dream_text=pending_dream['dream_text'],
                interpretation=pending_dream['interpretation'],  # –û–±—ã—á–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
                source_type=source_type
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            astrological_saved = db.save_dream(
                chat_id=chat_id,
                dream_text=pending_dream['dream_text'],
                interpretation=pending_dream['astrological_interpretation'],  # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
                source_type=f"astrological_{source_type}"
            )
            
            dream_saved = dream_saved and astrological_saved
            save_message = "‚úÖ –°–æ–Ω —Å –æ–±—ã—á–Ω—ã–º –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            dream_saved = db.save_dream(
                chat_id=chat_id,
                dream_text=pending_dream['dream_text'],
                interpretation=pending_dream['interpretation'],
                source_type=source_type
            )
            save_message = "‚úÖ –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫!"
        
        if dream_saved:
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            db.log_activity(user, chat_id, "dream_saved_to_diary", f"type:{source_type}, astrological:{has_astrological}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.answer(save_message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
            try:
                await query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(save_message)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            db.delete_pending_dream(chat_id)
            
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            db.log_activity(user, chat_id, "dream_save_failed", f"type:{source_type}")
            
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∞.")
        db.log_activity(user, chat_id, "dream_save_error", str(e))


async def handle_astrological_callback(update, context, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ'"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ë–î
        from core.database import db
        pending_dream = db.get_pending_dream(chat_id)
        if not pending_dream:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º source_type –∏–∑ callback_data
        source_type = callback_data.split(":")[1]
        print(f"üîç DEBUG: handle_astrological_callback - callback_data = {callback_data}, source_type = {source_type}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
        await query.answer("üîÆ –£—Ç–æ—á–Ω—è—é –¥–∞—Ç—É —Å–Ω–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
        date_msg = await query.message.reply_text(
            "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è —ç—Ç–æ—Ç —Å–æ–Ω?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"astrological_date:today:{source_type}")],
                [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data=f"astrological_date:yesterday:{source_type}")],
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=f"astrological_date:custom:{source_type}")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['date_selection_msg'] = date_msg
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
        from core.database import db
        db.log_activity(user, chat_id, "astrological_date_error", str(e))


async def handle_astrological_date_callback(update, context, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: astrological_date:date_type:source_type
        parts = callback_data.split(":")
        date_type = parts[1]
        source_type = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ë–î
        from core.database import db
        pending_dream = db.get_pending_dream(chat_id)
        if not pending_dream:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        from datetime import datetime, timezone, timedelta
        today = datetime.now(timezone.utc)
        
        if date_type == "today":
            selected_date = today
            date_str = today.strftime("%Y-%m-%d")
        elif date_type == "yesterday":
            selected_date = today - timedelta(days=1)
            date_str = selected_date.strftime("%Y-%m-%d")
        elif date_type == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã
            await query.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
            context.user_data['waiting_for_date'] = True
            context.user_data['pending_astrological'] = {
                'source_type': source_type,
                'pending_dream': pending_dream
            }
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            await query.message.edit_text(
                "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_date_input")]
                ])
            )
            return
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞—Ç—ã.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await perform_astrological_analysis(update, context, pending_dream, source_type, date_str)
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
        from core.database import db
        db.log_activity(user, chat_id, "astrological_date_error", str(e))


async def perform_astrological_analysis(update, context, pending_dream, source_type, date_str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
        await query.answer("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–Ω –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        thinking_msg = await query.message.reply_text("üîÆ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —Å–Ω–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        from core.ai_service import ai_service
        astrological_reply = await ai_service.analyze_dream_astrologically(
            pending_dream['dream_text'], 
            pending_dream['interpretation'],
            source_type,
            date_str
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        from core.database import db
        db.log_activity(user, chat_id, "astrological_interpretation", f"date:{date_str}, reply:{astrological_reply[:300]}")
        db.save_message(chat_id, "assistant", astrological_reply)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        message_type = ai_service.extract_message_type(astrological_reply)
        
        if message_type == 'dream':
            # –î–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", callback_data=f"save_dream:{source_type}")]
            ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ
            db.update_pending_dream_astrological(chat_id, astrological_reply)
            print(f"üîç DEBUG: perform_astrological_analysis - –æ–±–Ω–æ–≤–ª–µ–Ω pending_dream –≤ –ë–î")
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
            try:
                await query.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            keyboard = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        if keyboard:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown')
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ.")
        from core.database import db
        db.log_activity(user, chat_id, "astrological_error", str(e))
        await thinking_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")


async def handle_cancel_date_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        context.user_data.pop('waiting_for_date', None)
        context.user_data.pop('pending_astrological', None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await query.answer("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –¥–∞—Ç—ã
        await query.message.delete()
        
    except Exception as e:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã")
        from core.database import db
        db.log_activity(user, chat_id, "cancel_date_error", str(e))


async def handle_date_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
        date_input = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì
        if not is_valid_date_format(date_input):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_date_input")]
                ])
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        date_str = convert_date_format(date_input)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        pending_astrological = context.user_data.get('pending_astrological')
        if not pending_astrological:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        context.user_data.pop('waiting_for_date', None)
        pending_data = context.user_data.pop('pending_astrological')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await perform_astrological_analysis_from_date_input(
            update, context, 
            pending_data['pending_dream'], 
            pending_data['source_type'], 
            date_str
        )
        
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.")
        from core.database import db
        db.log_activity(user, chat_id, "date_input_error", str(e))


def is_valid_date_format(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if not date_str or len(date_str) != 10 or date_str[2] != '.' or date_str[5] != '.':
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ –¥–∞—Ç—ã
        day = int(date_str[0:2])
        month = int(date_str[3:5])
        year = int(date_str[6:10])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
        if year < 1900 or year > 2100:
            return False
        if month < 1 or month > 12:
            return False
        if day < 1 or day > 31:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–π –¥–ª—è –º–µ—Å—è—Ü–∞
        from datetime import datetime
        try:
            datetime(year, month, day)
            return True
        except ValueError:
            return False
            
    except (ValueError, IndexError):
        return False


def convert_date_format(date_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã –∏–∑ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD"""
    day = date_str[0:2]
    month = date_str[3:5]
    year = date_str[6:10]
    return f"{year}-{month}-{day}"


async def perform_astrological_analysis_from_date_input(update, context, pending_dream, source_type, date_str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        thinking_msg = await update.message.reply_text("üîÆ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —Å–Ω–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        from core.ai_service import ai_service
        astrological_reply = await ai_service.analyze_dream_astrologically(
            pending_dream['dream_text'], 
            pending_dream['interpretation'],
            source_type,
            date_str
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        from core.database import db
        db.log_activity(user, chat_id, "astrological_interpretation", f"date:{date_str}, reply:{astrological_reply[:300]}")
        db.save_message(chat_id, "assistant", astrological_reply)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        message_type = ai_service.extract_message_type(astrological_reply)
        
        if message_type == 'dream':
            # –î–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", callback_data=f"save_dream:{source_type}")]
            ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ
            db.update_pending_dream_astrological(chat_id, astrological_reply)
            
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            keyboard = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        if keyboard:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown')
        
    except Exception as e:
        await thinking_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        from core.database import db
        db.log_activity(user, chat_id, "astrological_error", str(e))


async def main_message_handler(update, context):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = str(update.effective_chat.id)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if chat_id in admin_broadcast_states:
        await handle_admin_broadcast_content(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if context.user_data.get('waiting_for_date'):
        await handle_date_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.voice:
        await handle_voice_message(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await handle_message(update, context)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CommandHandler("admin", admin_panel_command))
telegram_app.add_handler(CommandHandler("cancel", cancel_command))
telegram_app.add_handler(CallbackQueryHandler(main_button_handler))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.PHOTO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.VIDEO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.Document.ALL, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.AUDIO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.VOICE, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.Sticker.ALL, main_message_handler))


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting webhook server...")
    
    try:
        # –û—á–∏—â–∞–µ–º Telegram-–º–µ–Ω—é (‚â°)
        await telegram_app.bot.set_my_commands([])
        logger.info("‚úÖ Telegram menu cleared")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
        if WEBHOOK_URL:
            webhook_url = f"{WEBHOOK_URL.rstrip('/')}/webhook"
            await telegram_app.bot.set_webhook(
                url=webhook_url,
                secret_token=SECRET_TOKEN,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ Webhook set to: {webhook_url}")
        else:
            logger.warning("‚ö†Ô∏è WEBHOOK_URL not set - webhook not configured")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
        await telegram_app.initialize()
        await telegram_app.start()
        logger.info("‚úÖ Telegram application started")
        
    except Exception as e:
        logger.error(f"‚ùå Startup error: {e}")
        raise
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # Shutdown
    logger.info("üõë Shutting down...")
    try:
        await telegram_app.stop()
        await telegram_app.shutdown()
        logger.info("‚úÖ Telegram application stopped")
    except Exception as e:
        logger.error(f"‚ùå Shutdown error: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Dream Analysis Bot",
    description="Telegram bot for dream interpretation using Jung's methodology",
    version="2.0.0",
    lifespan=lifespan
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Dream Analysis Bot is running",
        "version": "2.0.0",
        "status": "active"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        bot_info = await telegram_app.bot.get_me()
        return {
            "status": "healthy",
            "bot_username": bot_info.username,
            "bot_id": bot_info.id,
            "webhook_configured": bool(WEBHOOK_URL)
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unavailable")


@app.post("/webhook")
async def webhook(request: Request):
    """Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if SECRET_TOKEN:
            token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            if token != SECRET_TOKEN:
                logger.warning("Invalid secret token in webhook request")
                raise HTTPException(status_code=403, detail="Invalid secret token")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        await telegram_app.update_queue.put(update)
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)