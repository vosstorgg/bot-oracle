"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –¥–ª—è Dream Analysis Bot
"""
import os
import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.user import handle_message, handle_voice_message
from handlers.profile import start_command, handle_profile_callbacks, handle_info_callbacks, send_start_menu
from handlers.admin import admin_panel_command, cancel_command, handle_admin_callbacks, handle_admin_broadcast_content, admin_broadcast_states
from handlers.diary import handle_diary_callbacks
from handlers.astrological import (
    handle_astrological_callback, 
    handle_astrological_date_callback, 
    handle_cancel_date_input,
    handle_date_input
)
from handlers.dream_save import handle_save_dream_callback

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from core.config import TELEGRAM_TOKEN, SECRET_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-app.railway.app/webhook
PORT = int(os.getenv("PORT", 8000))

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

# –°–æ–∑–¥–∞–µ–º Telegram Application
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()


async def main_button_handler(update, context):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    from core.database import db
    db.log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if query.data == "main_menu":
        try:
            await query.delete_message()
        except Exception:
            pass
        await send_start_menu(query.message.chat_id, context, update.effective_user)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if query.data in ["start_profile", "profile_step:gender", "profile_step:skip", "about", "donate", "start_first_dream"] or \
       query.data.startswith(("gender:", "age:", "lucid:")):
        if query.data in ["about", "donate", "start_first_dream"]:
            await handle_info_callbacks(update, context, query.data)
        else:
            await handle_profile_callbacks(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–æ–≤
    if query.data.startswith(("diary_page:", "dream_view:", "dream_delete")):
        await handle_diary_callbacks(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫
    if query.data.startswith("save_dream:"):
        await handle_save_dream_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if query.data.startswith("astrological:"):
        await handle_astrological_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if query.data.startswith("astrological_date:"):
        await handle_astrological_date_callback(update, context, query.data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    if query.data == "cancel_date_input":
        await handle_cancel_date_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    if query.data.startswith(("admin_", "broadcast_confirm")):
        await handle_admin_callbacks(update, context, query.data)
        return


async def main_message_handler(update, context):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = str(update.effective_chat.id)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if chat_id in admin_broadcast_states:
        await handle_admin_broadcast_content(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if context.user_data.get('waiting_for_date'):
        await handle_date_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.voice:
        await handle_voice_message(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await handle_message(update, context)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CommandHandler("admin", admin_panel_command))
telegram_app.add_handler(CommandHandler("cancel", cancel_command))
telegram_app.add_handler(CallbackQueryHandler(main_button_handler))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.PHOTO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.VIDEO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.Document.ALL, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.AUDIO, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.VOICE, main_message_handler))
telegram_app.add_handler(MessageHandler(filters.Sticker.ALL, main_message_handler))


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting webhook server...")
    
    try:
        # –û—á–∏—â–∞–µ–º Telegram-–º–µ–Ω—é (‚â°)
        await telegram_app.bot.set_my_commands([])
        logger.info("‚úÖ Telegram menu cleared")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω
        if WEBHOOK_URL:
            webhook_url = f"{WEBHOOK_URL.rstrip('/')}/webhook"
            await telegram_app.bot.set_webhook(
                url=webhook_url,
                secret_token=SECRET_TOKEN,
                drop_pending_updates=True
            )
            logger.info(f"‚úÖ Webhook set to: {webhook_url}")
        else:
            logger.warning("‚ö†Ô∏è WEBHOOK_URL not set - webhook not configured")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
        await telegram_app.initialize()
        await telegram_app.start()
        logger.info("‚úÖ Telegram application started")
        
    except Exception as e:
        logger.error(f"‚ùå Startup error: {e}")
        raise
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # Shutdown
    logger.info("üõë Shutting down...")
    try:
        await telegram_app.stop()
        await telegram_app.shutdown()
        logger.info("‚úÖ Telegram application stopped")
    except Exception as e:
        logger.error(f"‚ùå Shutdown error: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Dream Analysis Bot",
    description="Telegram bot for dream interpretation using Jung's methodology",
    version="2.0.0",
    lifespan=lifespan
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Dream Analysis Bot is running",
        "version": "2.0.0",
        "status": "active"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        bot_info = await telegram_app.bot.get_me()
        return {
            "status": "healthy",
            "bot_username": bot_info.username,
            "bot_id": bot_info.id,
            "webhook_configured": bool(WEBHOOK_URL)
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unavailable")


@app.post("/webhook")
async def webhook(request: Request):
    """Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if SECRET_TOKEN:
            token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            if token != SECRET_TOKEN:
                logger.warning("Invalid secret token in webhook request")
                raise HTTPException(status_code=403, detail="Invalid secret token")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        await telegram_app.update_queue.put(update)
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
