import os
import asyncio
import logging
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from bot_handlers import start_command, button_handler, handle_message, admin_command, admin_broadcast_callback, cancel_command, handle_voice_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-app.railway.app/webhook
SECRET_TOKEN = os.getenv("SECRET_TOKEN")  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
PORT = int(os.getenv("PORT", 8000))

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is required")

# –°–æ–∑–¥–∞–µ–º Telegram Application
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏  
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CommandHandler("admin", admin_command))
telegram_app.add_handler(CommandHandler("cancel", cancel_command))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞)
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_message))
telegram_app.add_handler(MessageHandler(filters.VIDEO, handle_message))
telegram_app.add_handler(MessageHandler(filters.Document.ALL, handle_message))
telegram_app.add_handler(MessageHandler(filters.AUDIO, handle_message))
telegram_app.add_handler(MessageHandler(filters.VOICE, handle_message))
telegram_app.add_handler(MessageHandler(filters.Sticker.ALL, handle_message))

from contextlib import asynccontextmanager
from telegram import BotCommand

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting webhook server...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Application
    await telegram_app.initialize()
    await telegram_app.start()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫–∏)
    await telegram_app.bot.set_my_commands([])
    logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL)
    if WEBHOOK_URL:
        try:
            webhook_url = f"{WEBHOOK_URL}/webhook"
            await telegram_app.bot.set_webhook(
                url=webhook_url,
                secret_token=SECRET_TOKEN,
                drop_pending_updates=True  # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down webhook server...")
    await telegram_app.stop()
    await telegram_app.shutdown()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Dream Analysis Bot", version="2.0", lifespan=lifespan)

@app.get("/")
async def root():
    """–ë–∞–∑–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "running",
        "service": "Dream Analysis Bot",
        "version": "2.0",
        "webhook": bool(WEBHOOK_URL)
    }

@app.get("/health")
async def health_check():
    """Health check endpoint –¥–ª—è Railway"""
    try:
        bot_info = await telegram_app.bot.get_me()
        return {
            "status": "healthy",
            "bot_username": bot_info.username,
            "webhook_configured": bool(WEBHOOK_URL)
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Bot not available")

@app.post("/webhook")
async def webhook_handler(request: Request):
    """–û—Å–Ω–æ–≤–Ω–æ–π webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if SECRET_TOKEN:
        received_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if received_token != SECRET_TOKEN:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω")
            raise HTTPException(status_code=403, detail="Forbidden")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        update_data = await request.json()
        
        # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
        update = Update.de_json(update_data, telegram_app.bot)
        
        if update:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            asyncio.create_task(telegram_app.process_update(update))
            logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.update_id}")
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/set_webhook")
async def set_webhook_endpoint():
    """Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    if not WEBHOOK_URL:
        raise HTTPException(status_code=400, detail="WEBHOOK_URL not configured")
    
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await telegram_app.bot.set_webhook(
            url=webhook_url,
            secret_token=SECRET_TOKEN,
            drop_pending_updates=True
        )
        return {"status": "success", "webhook_url": webhook_url}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/webhook")
async def delete_webhook():
    """Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    try:
        await telegram_app.bot.delete_webhook(drop_pending_updates=True)
        return {"status": "success", "message": "Webhook deleted"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/webhook_info")
async def webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
    try:
        webhook_info = await telegram_app.bot.get_webhook_info()
        return {
            "url": webhook_info.url,
            "has_custom_certificate": webhook_info.has_custom_certificate,
            "pending_update_count": webhook_info.pending_update_count,
            "last_error_date": webhook_info.last_error_date,
            "last_error_message": webhook_info.last_error_message,
            "max_connections": webhook_info.max_connections,
            "allowed_updates": webhook_info.allowed_updates
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if __name__ == "__main__":
    import uvicorn
    logger.info(f"üåü –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=PORT,
        log_level="info",
        reload=False  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    )
