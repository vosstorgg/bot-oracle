"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–æ–≤
"""
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from core.database import db
from core.models import PaginationHelper, MessageFormatter
from core.config import PAGINATION


async def show_dream_diary(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core.config import IMAGE_PATHS
    
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–æ–≤
    total_dreams = db.count_user_dreams(chat_id)
    
    if total_dreams == 0:
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        caption = (
            "–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ —Å–Ω—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π —Å–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º), "
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –≤–º–µ—Å—Ç–µ —Å –º–æ–µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π.\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!"
        )
        
        try:
            with open(IMAGE_PATHS["diary"], "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            await update.message.reply_text(
                caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    pagination = PaginationHelper.calculate_pagination(
        total_dreams, page, PAGINATION["dreams_per_page"]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    dreams = db.get_user_dreams(chat_id, pagination["items_per_page"], pagination["offset"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    caption = (
        "–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ —Å–Ω—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π —Å–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    )
    
    if pagination["total_pages"] > 1:
        caption += f"\n\n–°—Ç—Ä. {pagination['current_page'] + 1} –∏–∑ {pagination['total_pages']}"
    
    keyboard = []
    
    for i, dream in enumerate(dreams):
        dream_id, dream_text, interpretation, astrological_interpretation, source_type, created_at, dream_date = dream
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        dream_preview = MessageFormatter.format_dream_preview(dream_text, 35)
        source_icon = MessageFormatter.get_source_icon(source_type)
        date_str = MessageFormatter.format_date(created_at)
        
        button_text = f"{source_icon} {date_str} ‚Ä¢ {dream_preview}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"dream_view:{dream_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if pagination["has_prev"]:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"diary_page:{pagination['current_page']-1}"))
    if pagination["has_next"]:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"diary_page:{pagination['current_page']+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    try:
        with open(IMAGE_PATHS["diary"], "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except FileNotFoundError:
        await update.message.reply_text(
            caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


async def show_dream_diary_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ —á–µ—Ä–µ–∑ callback (—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    from core.config import IMAGE_PATHS
    
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–æ–≤
    total_dreams = db.count_user_dreams(chat_id)
    
    if total_dreams == 0:
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        
        caption = (
            "–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ —Å–Ω—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π —Å–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º), "
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –≤–º–µ—Å—Ç–µ —Å –º–æ–µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π.\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        try:
            await query.delete_message()
        except Exception:
            pass
        
        try:
            with open(IMAGE_PATHS["diary"], "rb") as photo:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            await context.bot.send_message(
                chat_id=chat_id,
                text=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    pagination = PaginationHelper.calculate_pagination(
        total_dreams, page, PAGINATION["dreams_per_page"]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    dreams = db.get_user_dreams(chat_id, pagination["items_per_page"], pagination["offset"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    caption = (
        "–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ —Å–Ω—ã –∏ –∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π —Å–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    )
    
    if pagination["total_pages"] > 1:
        caption += f"\n\n–°—Ç—Ä. {pagination['current_page'] + 1} –∏–∑ {pagination['total_pages']}"
    
    keyboard = []
    
    for i, dream in enumerate(dreams):
        dream_id, dream_text, interpretation, source_type, created_at, dream_date = dream
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        dream_preview = MessageFormatter.format_dream_preview(dream_text, 35)
        source_icon = MessageFormatter.get_source_icon(source_type)
        date_str = MessageFormatter.format_date(created_at)
        
        button_text = f"{source_icon} {date_str} ‚Ä¢ {dream_preview}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"dream_view:{dream_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if pagination["has_prev"]:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"diary_page:{pagination['current_page']-1}"))
    if pagination["has_next"]:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"diary_page:{pagination['current_page']+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
    try:
        await query.delete_message()
    except Exception:
        pass
    
    try:
        with open(IMAGE_PATHS["diary"], "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    except FileNotFoundError:
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


async def show_dream_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–Ω–∞"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–Ω –∏–∑ –ë–î
    dream = db.get_dream_by_id(chat_id, dream_id)
    
    if not dream:
        await query.answer("‚ùå –°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    dream_id, dream_text, interpretation, astrological_interpretation, source_type, created_at, dream_date = dream
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_icon = MessageFormatter.get_source_description(source_type)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = MessageFormatter.format_datetime(created_at)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
    message_text = (
        f"üìñ *–°–æ–Ω –æ—Ç {date_str}*\n"
        f"{source_icon}\n\n"
        f"*üí≠ –û–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞:*\n\n{dream_text}\n\n"
        f"*‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{interpretation}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if astrological_interpretation:
        message_text += f"\n\n*üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{astrological_interpretation}"
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    message_text = MessageFormatter.truncate_message(message_text, PAGINATION["max_message_length"])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"dream_delete:{dream_id}"),
            InlineKeyboardButton("‚óÄÔ∏è –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_page:0")
        ]
    ]
    
    try:
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except BadRequest:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        try:
            await query.delete_message()
        except Exception:
            pass
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )


async def delete_dream_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–∞"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
    dream = db.get_dream_by_id(chat_id, dream_id)
    
    if not dream:
        await query.answer("‚ùå –°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    dream_id, dream_text, interpretation, astrological_interpretation, source_type, created_at, dream_date = dream
    date_str = MessageFormatter.format_date(created_at)
    dream_preview = MessageFormatter.format_dream_preview(dream_text, 100)
    
    message_text = (
        f"üóë *–£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞*\n\n"
        f"*–î–∞—Ç–∞:* {date_str}\n"
        f"*–°–æ–Ω:* {dream_preview}\n\n"
        f"–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–æ–Ω? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"dream_delete_yes:{dream_id}"),
            InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"dream_view:{dream_id}")
        ]
    ]
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def delete_dream_execute(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_id: int):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–∞"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–Ω
    success = db.delete_dream(chat_id, dream_id)
    
    if success:
        db.log_activity(user, chat_id, "dream_deleted", f"dream_id:{dream_id}")
        await query.answer("‚úÖ –°–æ–Ω —É–¥–∞–ª–µ–Ω")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–Ω–µ–≤–Ω–∏–∫—É
        await show_dream_diary_callback(update, context, 0)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–Ω–∞")


async def handle_diary_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–æ–≤"""
    
    if callback_data.startswith("diary_page:"):
        page = int(callback_data.split(":")[1])
        await show_dream_diary_callback(update, context, page)
    
    elif callback_data.startswith("dream_view:"):
        dream_id = int(callback_data.split(":")[1])
        await show_dream_detail(update, context, dream_id)
    
    elif callback_data.startswith("dream_delete:") and not callback_data.startswith("dream_delete_yes:"):
        dream_id = int(callback_data.split(":")[1])
        await delete_dream_confirm(update, context, dream_id)
    
    elif callback_data.startswith("dream_delete_yes:"):
        dream_id = int(callback_data.split(":")[1])
        await delete_dream_execute(update, context, dream_id)
