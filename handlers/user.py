"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (—Å–Ω—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
"""
import os
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from core.database import db
from core.ai_service import ai_service
from core.config import MAIN_MENU, AI_SETTINGS, IMAGE_PATHS


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
    from handlers.admin import admin_broadcast_states, handle_admin_broadcast_content
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if chat_id in admin_broadcast_states:
        await handle_admin_broadcast_content(update, context)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–µ–º caption –¥–ª—è –º–µ–¥–∏–∞)
    user_message = None
    if update.message.text:
        user_message = update.message.text
    elif update.message.caption:
        user_message = update.message.caption
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_message == "üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω":
        await start_first_dream_command(update, context)
        return
    
    if user_message == "üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞":
        await channel_view_command(update, context)
        return
    
    if user_message == "üìñ –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤":
        from handlers.diary import show_dream_diary
        await show_dream_diary(update, context)
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤
    if not user_message:
        await update.message.reply_text(
            "ü§î –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ–Ω—è—Ç—å.",
            reply_markup=MAIN_MENU
        )
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞
    db.log_activity(user, chat_id, "message", user_message)
    db.log_activity(user, chat_id, "gpt_request", f"model={AI_SETTINGS['model']}, temp={AI_SETTINGS['temperature']}, max_tokens={AI_SETTINGS['max_tokens']}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞ (source_type = 'text' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # –ü–µ—Ä–µ–¥–∞–µ–º thinking_msg, —á—Ç–æ–±—ã "–†–∞–∑–º—ã—à–ª—è—é..." –∑–∞–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    await process_dream_text(update, context, user_message, thinking_msg, 'text')


async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    voice = update.message.voice
    
    db.log_activity(user, chat_id, "voice_message", f"duration: {voice.duration}s")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text("üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(voice.file_id)
        file_content = await file.download_as_bytearray()
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Whisper
        transcribed_text = await ai_service.transcribe_voice(bytes(file_content), "ogg")
        
        if not transcribed_text:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ Whisper)
        should_reject, rejection_reason = ai_service.should_reject_voice_message(transcribed_text, voice.duration)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        db.log_activity(user, chat_id, "voice_analysis", 
                       f"duration: {voice.duration}s, words: {len(transcribed_text.split())}, "
                       f"text: '{transcribed_text[:100]}', should_reject: {should_reject}, reason: {rejection_reason}")
        
        if should_reject:
            db.log_activity(user, chat_id, "voice_rejected", f"reason: {rejection_reason}, text: {transcribed_text}")
            await processing_msg.edit_text(
                "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ç—á–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        db.log_activity(user, chat_id, "voice_transcribed", transcribed_text[:100])
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –≤–∏–¥–∏–º–æ–π
            await processing_msg.edit_text(
                f"üé§ ‚ûú üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* {transcribed_text}",
                parse_mode='Markdown'
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–∞–∑–º—ã—à–ª—è—é..." –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await process_dream_text(update, context, transcribed_text, thinking_msg, 'voice')
        except BadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await update.message.reply_text(
                f"üé§ ‚ûú üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* {transcribed_text}",
                parse_mode='Markdown'
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...")
            await process_dream_text(update, context, transcribed_text, thinking_msg, 'voice')
        
    except Exception as e:
        db.log_activity(user, chat_id, "voice_error", str(e))
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
        )


async def process_dream_text(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_text: str, message_to_edit=None, source_type: str = 'text'):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞ —á–µ—Ä–µ–∑ OpenAI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö)"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_stats(user, chat_id, dream_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.save_message(chat_id, "user", dream_text)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = db.get_message_history(chat_id, AI_SETTINGS["max_history"])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = db.get_user_profile(chat_id)
    profile_info = ai_service.format_profile_info(profile)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–Ω —á–µ—Ä–µ–∑ AI
        reply = await ai_service.analyze_dream(dream_text, history, profile_info)
        db.log_activity(user, chat_id, "dream_interpreted", reply[:300])
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫
        message_type = ai_service.extract_message_type(reply)
        if message_type == 'dream':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º source_type
            dream_saved = db.save_dream(
                chat_id=chat_id, 
                dream_text=dream_text, 
                interpretation=reply,
                source_type=source_type
            )
            
            if dream_saved:
                db.log_activity(user, chat_id, "dream_saved_to_diary", f"type:{source_type}")
            else:
                db.log_activity(user, chat_id, "dream_save_failed", f"type:{source_type}")
    
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑: {e}"
        db.log_activity(user, chat_id, "dream_interpretation_error", str(e))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    db.save_message(chat_id, "assistant", reply)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if message_to_edit:
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–∞–∑–º—ã—à–ª—è—é..." –Ω–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            await message_to_edit.edit_text(reply, parse_mode='Markdown', reply_markup=MAIN_MENU)
        except BadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(reply, parse_mode='Markdown', reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text(reply, parse_mode='Markdown', reply_markup=MAIN_MENU)


async def start_first_dream_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–Ω–∞"""
    await update.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. "
        "–û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä–æ–¥).",
        reply_markup=MAIN_MENU 
    )


async def channel_view_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∞–≤—Ç–æ—Ä–∞"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    from core.config import LINKS
    
    await update.message.reply_text(
        "–õ—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞.\n\n–°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=LINKS["author_channel"])]
        ])
    )
