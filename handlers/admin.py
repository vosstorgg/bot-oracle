"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, —Ä–∞—Å—Å—ã–ª–∫–∏)
"""
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.error import Forbidden, BadRequest, NetworkError
from core.database import db
from core.models import AdminBroadcastState, BroadcastResult
from core.config import ADMIN_CHAT_IDS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
admin_broadcast_states = {}


def is_admin(chat_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    chat_id_str = str(chat_id)
    return chat_id_str in ADMIN_CHAT_IDS


async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    if not is_admin(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_users = db.get_all_users()
    total_users = len(all_users)
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
    ]
    
    await update.message.reply_text(
        f"üîß *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    if not is_admin(chat_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    admin_broadcast_states[chat_id] = AdminBroadcastState()
    
    await query.edit_message_text(
        "üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel",
        parse_mode='Markdown'
    )


async def handle_admin_broadcast_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat_id = str(update.effective_chat.id)
    
    if chat_id not in admin_broadcast_states:
        return
    
    state = admin_broadcast_states[chat_id]
    
    if state.step == "waiting_content":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = update.message
        
        if message.text:
            state.content = message.text
            state.media_type = None
        elif message.photo:
            state.media_type = "photo"
            state.media_file_id = message.photo[-1].file_id
            state.caption = message.caption
        elif message.video:
            state.media_type = "video"
            state.media_file_id = message.video.file_id
            state.caption = message.caption
        elif message.document:
            state.media_type = "document"
            state.media_file_id = message.document.file_id
            state.caption = message.caption
        elif message.audio:
            state.media_type = "audio"
            state.media_file_id = message.audio.file_id
            state.caption = message.caption
        elif message.voice:
            state.media_type = "voice"
            state.media_file_id = message.voice.file_id
        elif message.sticker:
            state.media_type = "sticker"
            state.media_file_id = message.sticker.file_id
        else:
            await message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        state.step = "confirming"
        await handle_admin_broadcast_confirmation(update, context)


async def handle_admin_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat_id = str(update.effective_chat.id)
    state = admin_broadcast_states[chat_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = db.get_all_users()
    user_count = len(all_users)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
    preview = ""
    if state.content:
        preview = f"üìù –¢–µ–∫—Å—Ç: {state.content[:100]}{'...' if len(state.content) > 100 else ''}"
    elif state.media_type:
        preview = f"üìé {state.media_type.upper()}"
        if state.caption:
            preview += f"\nüìù –ü–æ–¥–ø–∏—Å—å: {state.caption[:100]}{'...' if len(state.caption) > 100 else ''}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_confirm_no")
        ]
    ]
    
    await update.message.reply_text(
        f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üìã –ü—Ä–µ–≤—å—é:\n{preview}\n\n"
        f"–¢–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_broadcast_confirm_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    if chat_id not in admin_broadcast_states:
        await query.answer("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    state = admin_broadcast_states[chat_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = db.get_all_users()
    
    await query.edit_message_text(
        f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
        f"üìä –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode='Markdown'
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    result = await send_broadcast_message_content(context, all_users, state)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del admin_broadcast_states[chat_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.total_sent}\n"
            f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.total_failed}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {len(result.forbidden)}\n"
            f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result.success_rate:.1f}%"
        ),
        parse_mode='Markdown'
    )


async def handle_broadcast_confirm_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_id in admin_broadcast_states:
        del admin_broadcast_states[chat_id]
    
    await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def send_broadcast_message_content(context, users, state: AdminBroadcastState) -> BroadcastResult:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    result = BroadcastResult()
    
    for user_chat_id in users:
        try:
            if state.content:
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=user_chat_id,
                    text=state.content,
                    parse_mode='Markdown'
                )
            elif state.media_type == "photo":
                await context.bot.send_photo(
                    chat_id=user_chat_id,
                    photo=state.media_file_id,
                    caption=state.caption,
                    parse_mode='Markdown' if state.caption else None
                )
            elif state.media_type == "video":
                await context.bot.send_video(
                    chat_id=user_chat_id,
                    video=state.media_file_id,
                    caption=state.caption,
                    parse_mode='Markdown' if state.caption else None
                )
            elif state.media_type == "document":
                await context.bot.send_document(
                    chat_id=user_chat_id,
                    document=state.media_file_id,
                    caption=state.caption,
                    parse_mode='Markdown' if state.caption else None
                )
            elif state.media_type == "audio":
                await context.bot.send_audio(
                    chat_id=user_chat_id,
                    audio=state.media_file_id,
                    caption=state.caption,
                    parse_mode='Markdown' if state.caption else None
                )
            elif state.media_type == "voice":
                await context.bot.send_voice(
                    chat_id=user_chat_id,
                    voice=state.media_file_id
                )
            elif state.media_type == "sticker":
                await context.bot.send_sticker(
                    chat_id=user_chat_id,
                    sticker=state.media_file_id
                )
            
            result.successful.append(user_chat_id)
            
        except Forbidden:
            result.forbidden.append(user_chat_id)
        except (BadRequest, NetworkError, Exception) as e:
            result.failed.append(user_chat_id)
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat_id}: {e}")
    
    return result


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    chat_id = str(update.effective_chat.id)
    
    if chat_id in admin_broadcast_states:
        del admin_broadcast_states[chat_id]
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


async def handle_admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
    query = update.callback_query
    chat_id = str(update.effective_chat.id)
    
    if not is_admin(chat_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    if callback_data == "admin_broadcast":
        await admin_broadcast_callback(update, context)
    
    elif callback_data == "admin_stats":
        await show_admin_stats(update, context)
    
    elif callback_data == "admin_users":
        await show_admin_users(update, context)
    
    elif callback_data == "broadcast_confirm_yes":
        await handle_broadcast_confirm_yes(update, context)
    
    elif callback_data == "broadcast_confirm_no":
        await handle_broadcast_confirm_no(update, context)


async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_user_stats_summary()
    
    await query.edit_message_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
        f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_audio']}\n"
        f"üíæ –°–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['total_dreams_saved']}\n\n"
        f"üí¨ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['total_messages'] // max(stats['total_users'], 1)}\n"
        f"üåô –°—Ä–µ–¥–Ω–µ —Å–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {stats['total_dreams_saved'] // max(stats['total_users'], 1)}",
        parse_mode='Markdown'
    )


async def show_admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_details = db.get_user_stats_details(limit=10)
    
    if not user_details:
        await query.edit_message_text(
            "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            parse_mode='Markdown'
        )
        return
    
    users_text = "üë• *–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    
    for i, (chat_id, username, messages, audio, dreams, last_activity, _) in enumerate(user_details, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if last_activity:
            from datetime import datetime, timezone
            time_diff = datetime.now(timezone.utc) - last_activity
            if time_diff.days > 0:
                activity_str = f"{time_diff.days}–¥ –Ω–∞–∑–∞–¥"
            elif time_diff.seconds > 3600:
                activity_str = f"{time_diff.seconds // 3600}—á –Ω–∞–∑–∞–¥"
            else:
                activity_str = "–Ω–µ–¥–∞–≤–Ω–æ"
        else:
            activity_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        username_str = username or "–±–µ–∑ –∏–º–µ–Ω–∏"
        users_text += (
            f"{i}. {username_str}\n"
            f"   üí¨ {messages or 0} —Å–æ–æ–±—â–µ–Ω–∏–π, üé§ {audio or 0} –≥–æ–ª–æ—Å–æ–≤—ã—Ö\n"
            f"   üíæ {dreams or 0} —Å–Ω–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_str}\n\n"
        )
    
    total_users = len(db.get_all_users())
    users_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    
    await query.edit_message_text(
        users_text,
        parse_mode='Markdown'
    )
