"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤
"""
import logging
from datetime import datetime, timezone, timedelta
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from core.utils import cleanup_astrological_interface, log_error_and_notify

logger = logging.getLogger(__name__)


async def handle_astrological_callback(update, context, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ'"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ë–î
        from core.database import db
        pending_dream = db.get_pending_dream(chat_id)
        if not pending_dream:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º source_type –∏–∑ callback_data
        source_type = callback_data.split(":")[1]
        logger.info(f"üîç DEBUG: handle_astrological_callback - callback_data = {callback_data}, source_type = {source_type}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
        await query.answer("üîÆ –£—Ç–æ—á–Ω—è—é –¥–∞—Ç—É —Å–Ω–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
        date_msg = await query.message.reply_text(
            "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è —ç—Ç–æ—Ç —Å–æ–Ω?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"astrological_date:today:{source_type}")],
                [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data=f"astrological_date:yesterday:{source_type}")],
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=f"astrological_date:custom:{source_type}")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['date_selection_msg'] = date_msg
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "astrological_date_error", str(e))


async def handle_astrological_date_callback(update, context, callback_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: astrological_date:date_type:source_type
        parts = callback_data.split(":")
        date_type = parts[1]
        source_type = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ë–î
        from core.database import db
        pending_dream = db.get_pending_dream(chat_id)
        if not pending_dream:
            await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        today = datetime.now(timezone.utc)
        
        if date_type == "today":
            selected_date = today
            date_str = today.strftime("%Y-%m-%d")
        elif date_type == "yesterday":
            selected_date = today - timedelta(days=1)
            date_str = selected_date.strftime("%Y-%m-%d")
        elif date_type == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã
            await query.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
            context.user_data['waiting_for_date'] = True
            context.user_data['pending_astrological'] = {
                'source_type': source_type,
                'pending_dream': pending_dream
            }
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            await query.message.edit_text(
                "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_date_input")]
                ])
            )
            return
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞—Ç—ã.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await perform_astrological_analysis(update, context, pending_dream, source_type, date_str)
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "astrological_date_error", str(e))


async def perform_astrological_analysis(update, context, pending_dream, source_type, date_str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
        await query.answer("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–Ω –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        thinking_msg = await query.message.reply_text("üîÆ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —Å–Ω–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        from core.ai_service import ai_service
        astrological_reply = await ai_service.analyze_dream_astrologically(
            pending_dream['dream_text'], 
            pending_dream['interpretation'],
            source_type,
            date_str
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        from core.database import db
        db.log_activity(user, chat_id, "astrological_interpretation", f"date:{date_str}, reply:{astrological_reply[:300]}")
        db.save_message(chat_id, "assistant", astrological_reply)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        message_type = ai_service.extract_message_type(astrological_reply)
        
        if message_type == 'dream':
            # –î–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", callback_data=f"save_dream:{source_type}")]
            ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ
            db.update_pending_dream_astrological(chat_id, astrological_reply)
            logger.info(f"üîç DEBUG: perform_astrological_analysis - –æ–±–Ω–æ–≤–ª–µ–Ω pending_dream –≤ –ë–î")
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
            await cleanup_astrological_interface(context, chat_id, astrological_reply)
                
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            keyboard = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        if keyboard:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown')
        
    except Exception as e:
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ.")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "astrological_error", str(e))
        await thinking_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")


async def perform_astrological_analysis_from_date_input(update, context, pending_dream, source_type, date_str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        thinking_msg = await update.message.reply_text("üîÆ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —Å–Ω–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π
        from core.ai_service import ai_service
        astrological_reply = await ai_service.analyze_dream_astrologically(
            pending_dream['dream_text'], 
            pending_dream['interpretation'],
            source_type,
            date_str
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        from core.database import db
        db.log_activity(user, chat_id, "astrological_interpretation", f"date:{date_str}, reply:{astrological_reply[:300]}")
        db.save_message(chat_id, "assistant", astrological_reply)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        message_type = ai_service.extract_message_type(astrological_reply)
        
        if message_type == 'dream':
            # –î–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", callback_data=f"save_dream:{source_type}")]
            ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–ê —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ
            db.update_pending_dream_astrological(chat_id, astrological_reply)
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
            await cleanup_astrological_interface(context, chat_id, astrological_reply)
            
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            keyboard = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        if keyboard:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown', reply_markup=keyboard)
        else:
            await thinking_msg.edit_text(astrological_reply, parse_mode='Markdown')
        
    except Exception as e:
        await thinking_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "astrological_error", str(e))


async def handle_cancel_date_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    chat_id = str(query.message.chat_id)
    user = update.effective_user
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        context.user_data.pop('waiting_for_date', None)
        context.user_data.pop('pending_astrological', None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await query.answer("‚ùå –í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –¥–∞—Ç—ã
        await query.message.delete()
        
    except Exception as e:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "cancel_date_error", str(e))


def is_valid_date_format(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if not date_str or len(date_str) != 10 or date_str[2] != '.' or date_str[5] != '.':
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ –¥–∞—Ç—ã
        day = int(date_str[0:2])
        month = int(date_str[3:5])
        year = int(date_str[6:10])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
        if year < 1900 or year > 2100:
            return False
        if month < 1 or month > 12:
            return False
        if day < 1 or day > 31:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–π –¥–ª—è –º–µ—Å—è—Ü–∞
        try:
            datetime(year, month, day)
            return True
        except ValueError:
            return False
            
    except (ValueError, IndexError):
        return False


def convert_date_format(date_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã –∏–∑ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD"""
    day = date_str[0:2]
    month = date_str[3:5]
    year = date_str[6:10]
    return f"{year}-{month}-{day}"


async def handle_date_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
        date_input = update.message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì
        if not is_valid_date_format(date_input):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_date_input")]
                ])
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        date_str = convert_date_format(date_input)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        pending_astrological = context.user_data.get('pending_astrological')
        if not pending_astrological:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        context.user_data.pop('waiting_for_date', None)
        pending_data = context.user_data.pop('pending_astrological')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await perform_astrological_analysis_from_date_input(
            update, context, 
            pending_data['pending_dream'], 
            pending_data['source_type'], 
            date_str
        )
        
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.")
        from core.database import db
        log_error_and_notify(db, user, chat_id, "date_input_error", str(e))
