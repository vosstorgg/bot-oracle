"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API (GPT-4 –∏ Whisper)
"""
import os
import io
import tempfile
from openai import AsyncOpenAI
from datetime import datetime, timezone
from typing import Optional, Dict, List, Tuple
from core.config import AI_SETTINGS, DEFAULT_SYSTEM_PROMPT, WHISPER_SETTINGS


class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    def build_prompt(self, profile_info: str = "") -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        prompt = DEFAULT_SYSTEM_PROMPT
        prompt += f"\n\n# Current date\nToday is {today_str}."
        
        if profile_info:
            prompt += f"\n\n# User context\n{profile_info.strip()}"
        
        return prompt
    
    def format_profile_info(self, profile: Optional[Tuple]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not profile:
            return ""
        
        gender, age_group, lucid = profile
        profile_parts = []
        
        if gender:
            profile_parts.append(f"User gender: {gender}")
        if age_group:
            profile_parts.append(f"User age group: {age_group}")
        if lucid:
            profile_parts.append(f"Lucid dream experience: {lucid}")
        
        return ". ".join(profile_parts) + ("." if profile_parts else "")
    
    async def analyze_dream(self, dream_text: str, history: List[Dict], profile_info: str = "") -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ —á–µ—Ä–µ–∑ GPT-4"""
        try:
            prompt = self.build_prompt(profile_info)
            
            response = await self.client.chat.completions.create(
                model=AI_SETTINGS["model"],
                messages=[{"role": "system", "content": prompt}] + history,
                temperature=AI_SETTINGS["temperature"],
                max_tokens=AI_SETTINGS["max_tokens"]
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}"
    
    def extract_message_type(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        if ai_response.startswith('üåô'):
            return 'dream'
        elif ai_response.startswith('‚ùì'):
            return 'question'
        elif ai_response.startswith('üí≠'):
            return 'chat'
        else:
            return 'unknown'
    
    async def transcribe_voice(self, voice_file_content: bytes, file_extension: str = "ogg") -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Whisper"""
        temp_file_path = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_file:
                temp_file.write(voice_file_content)
                temp_file_path = temp_file.name
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Whisper
            with open(temp_file_path, "rb") as audio_file:
                transcript = await self.client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru"
                )
                
                return transcript.text.strip()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return None
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file_path:
                try:
                    os.unlink(temp_file_path)
                except:
                    pass
    
    def is_transcription_suspicious(self, transcribed_text: str, voice_duration: float) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ Whisper)"""
        if not transcribed_text:
            return True, "empty_text"
        
        text_lower = transcribed_text.lower()
        words = text_lower.split()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        suspicious_phrases = WHISPER_SETTINGS["suspicious_phrases"]
        for phrase in suspicious_phrases:
            if phrase.lower() in text_lower:
                return True, f"suspicious_phrase: {phrase}"
        
        # 2. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (–º–µ–Ω—å—à–µ 1 —Å–ª–æ–≤–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã)
        if voice_duration > 4 and len(words) < voice_duration / 2:
            return True, f"too_short_text: {len(words)} words for {voice_duration}s"
        
        # 3. –¢–æ–ª—å–∫–æ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
        interjections = {"–º–º–º", "—Ö–º–º", "—ç–º", "–∞–≥–∞", "—É–≥—É", "–æ–π", "–∞—Ö", "–æ—Ö", "—ç—Ö", "—É—Ö"}
        if all(word in interjections for word in words) and len(words) > 0:
            return True, "only_interjections"
        
        # 4. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–º–º–º–º–º, –∞–∞–∞–∞–∞ –∏ —Ç.–¥.)
        for word in words:
            if len(word) > 3 and len(set(word)) == 1:
                return True, f"repetitive_chars: {word}"
        
        return False, ""
    
    def should_reject_voice_message(self, transcribed_text: str, voice_duration: float) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ)
        if voice_duration < WHISPER_SETTINGS["min_duration"]:
            return True, f"too_short_duration: {voice_duration}s"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_suspicious, reason = self.is_transcription_suspicious(transcribed_text, voice_duration)
        
        if is_suspicious:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ –∏ —Ñ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å—Ä–∞–∑—É
            if voice_duration < WHISPER_SETTINGS["max_duration_for_phrase_filter"] or "suspicious_phrase" in reason:
                return True, reason
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –º–æ–∂–µ–º –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫
            elif "too_short_text" not in reason:
                return True, reason
        
        return False, ""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
ai_service = AIService()
