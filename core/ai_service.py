"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API (GPT-4 –∏ Whisper)
"""
import os
import io
import tempfile
from openai import AsyncOpenAI
from datetime import datetime, timezone
from typing import Optional, Dict, List, Tuple
from core.config import AI_SETTINGS, DEFAULT_SYSTEM_PROMPT, WHISPER_SETTINGS


class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    def build_prompt(self, profile_info: str = "") -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        prompt = DEFAULT_SYSTEM_PROMPT
        prompt += f"\n\n# Current date\nToday is {today_str}."
        
        if profile_info:
            prompt += f"\n\n# User context\n{profile_info.strip()}"
        
        return prompt
    
    def format_profile_info(self, profile: Optional[Tuple]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not profile:
            return ""
        
        gender, age_group, lucid = profile
        profile_parts = []
        
        if gender:
            profile_parts.append(f"User gender: {gender}")
        if age_group:
            profile_parts.append(f"User age group: {age_group}")
        if lucid:
            profile_parts.append(f"Lucid dream experience: {lucid}")
        
        return ". ".join(profile_parts) + ("." if profile_parts else "")
    
    async def analyze_dream(self, dream_text: str, history: List[Dict], profile_info: str = "") -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ —á–µ—Ä–µ–∑ GPT-4"""
        try:
            prompt = self.build_prompt(profile_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–Ω–∞ –≤ –ø—Ä–æ–º–ø—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
            today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
            dream_with_date = f"–°–æ–Ω –æ—Ç {today_str}:\n{dream_text}"
            
            response = await self.client.chat.completions.create(
                model=AI_SETTINGS["model"],
                messages=[{"role": "system", "content": prompt}] + history + [{"role": "user", "content": dream_with_date}],
                temperature=AI_SETTINGS["temperature"],
                max_tokens=AI_SETTINGS["max_tokens"]
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}"
    
    async def analyze_clarification_question(self, question: str, clarification_prompt: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ GPT-4"""
        try:
            response = await self.client.chat.completions.create(
                model=AI_SETTINGS["model"],
                messages=[
                    {"role": "system", "content": clarification_prompt},
                    {"role": "user", "content": question}
                ],
                temperature=AI_SETTINGS["temperature"],
                max_tokens=AI_SETTINGS["max_tokens"]
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}"
    
    async def analyze_dream_astrologically(self, dream_text: str, previous_interpretation: str, source_type: str) -> str:
        """–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–Ω–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            astrological_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ –∏ —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.

–ü–†–ï–î–´–î–£–©–ï–ï –¢–û–õ–ö–û–í–ê–ù–ò–ï (—Å–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å):
{previous_interpretation}

–°–û–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{dream_text}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –°–æ—Ö—Ä–∞–Ω–∏ –¢–û–ß–ù–û —Ç–æ—Ç –∂–µ —Ç–æ–Ω –≥–æ–ª–æ—Å–∞, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É, —á—Ç–æ –±—ã–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: –ø–ª–∞–Ω–µ—Ç—ã, –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞, –¥–æ–º–∞, –∞—Å–ø–µ–∫—Ç—ã
3. –°–≤—è–∂–∏ —Å–∏–º–≤–æ–ª—ã —Å–Ω–∞ —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏
4. –ë—É–¥—å —Ç–∞–∫ –∂–µ –∫—Ä–∞—Ç–æ–∫/–ø–æ–¥—Ä–æ–±–µ–Ω, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ –∂–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–í –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —ç–º–æ–¥–∑–∏-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:
üîÆ - –ï—Å–ª–∏ —ç—Ç–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–∞
‚ùì - –ï—Å–ª–∏ —ç—Ç–æ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç
üí≠ - –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∞—è –±–µ—Å–µ–¥–∞

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ '—Ç—ã'."""

            response = await self.client.chat.completions.create(
                model=AI_SETTINGS["model"],
                messages=[
                    {"role": "system", "content": astrological_prompt},
                    {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π —Å–æ–Ω –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏: {dream_text}"}
                ],
                temperature=AI_SETTINGS["temperature"],
                max_tokens=AI_SETTINGS["max_tokens"]
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}"
    
    def extract_message_type(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        if ai_response.startswith('üåô') or ai_response.startswith('üîÆ'):
            return 'dream'
        elif ai_response.startswith('‚ùì'):
            return 'question'
        elif ai_response.startswith('üí≠'):
            return 'chat'
        else:
            return 'unknown'
    
    async def transcribe_voice(self, voice_file_content: bytes, file_extension: str = "ogg") -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Whisper"""
        temp_file_path = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_file:
                temp_file.write(voice_file_content)
                temp_file_path = temp_file.name
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Whisper —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            with open(temp_file_path, "rb") as audio_file:
                transcript = await self.client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru",
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    response_format="text",
                    temperature=0.2  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                )
                
                return transcript.strip()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return None
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file_path:
                try:
                    os.unlink(temp_file_path)
                except:
                    pass
    
    def is_transcription_suspicious(self, transcribed_text: str, voice_duration: float) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ Whisper)"""
        if not transcribed_text:
            return True, "empty_text"
        
        text_lower = transcribed_text.lower()
        words = text_lower.split()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
        suspicious_phrases = WHISPER_SETTINGS["suspicious_phrases"]
        for phrase in suspicious_phrases:
            if phrase.lower() in text_lower:
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å—Ä–∞–∑—É, –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ —Å–ª—É—á–∞–∏
                if voice_duration < 3 or phrase in ["—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", "—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏"]:
                    return True, f"suspicious_phrase: {phrase}"
        
        # 2. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (—Å–º—è–≥—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)
        if voice_duration > 6 and len(words) < voice_duration / 3:  # –ë—ã–ª–æ /2, —Å—Ç–∞–ª–æ /3
            return True, f"too_short_text: {len(words)} words for {voice_duration}s"
        
        # 3. –¢–æ–ª—å–∫–æ –º–µ–∂–¥–æ–º–µ—Ç–∏—è (—Å–º—è–≥—á–∞–µ–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ –º–µ–∂–¥–æ–º–µ—Ç–∏–π)
        interjections = {"–º–º–º", "—Ö–º–º", "—ç–º", "–∞–≥–∞", "—É–≥—É", "–æ–π", "–∞—Ö", "–æ—Ö", "—ç—Ö", "—É—Ö"}
        if len(words) <= 2 and all(word in interjections for word in words) and voice_duration > 3:
            return True, "only_interjections"
        
        # 4. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (—Å–º—è–≥—á–∞–µ–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ)
        for word in words:
            if len(word) > 5 and len(set(word)) == 1:  # –ë—ã–ª–æ >3, —Å—Ç–∞–ª–æ >5
                return True, f"repetitive_chars: {word}"
        
        return False, ""
    
    def should_reject_voice_message(self, transcribed_text: str, voice_duration: float) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ)
        if voice_duration < WHISPER_SETTINGS["min_duration"]:
            return True, f"too_short_duration: {voice_duration}s"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_suspicious, reason = self.is_transcription_suspicious(transcribed_text, voice_duration)
        
        if is_suspicious:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞—É–¥–∏–æ –∏ —Ñ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å—Ä–∞–∑—É
            if voice_duration < WHISPER_SETTINGS["max_duration_for_phrase_filter"] or "suspicious_phrase" in reason:
                return True, reason
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –º–æ–∂–µ–º –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫
            elif "too_short_text" not in reason:
                return True, reason
        
        return False, ""
    
    def test_voice_settings(self, transcribed_text: str, voice_duration: float) -> Dict[str, any]:
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
        result = {
            "duration": voice_duration,
            "text": transcribed_text,
            "words_count": len(transcribed_text.split()) if transcribed_text else 0,
            "checks": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        if not transcribed_text:
            result["checks"]["empty_text"] = True
        else:
            result["checks"]["empty_text"] = False
            
            text_lower = transcribed_text.lower()
            words = text_lower.split()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            suspicious_phrases = WHISPER_SETTINGS["suspicious_phrases"]
            found_suspicious = []
            for phrase in suspicious_phrases:
                if phrase.lower() in text_lower:
                    found_suspicious.append(phrase)
            result["checks"]["suspicious_phrases"] = found_suspicious
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            if voice_duration > 6 and len(words) < voice_duration / 3:
                result["checks"]["too_short_text"] = True
            else:
                result["checks"]["too_short_text"] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
            interjections = {"–º–º–º", "—Ö–º–º", "—ç–º", "–∞–≥–∞", "—É–≥—É", "–æ–π", "–∞—Ö", "–æ—Ö", "—ç—Ö", "—É—Ö"}
            if len(words) <= 2 and all(word in interjections for word in words) and voice_duration > 3:
                result["checks"]["only_interjections"] = True
            else:
                result["checks"]["only_interjections"] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            repetitive_chars = []
            for word in words:
                if len(word) > 5 and len(set(word)) == 1:
                    repetitive_chars.append(word)
            result["checks"]["repetitive_chars"] = repetitive_chars
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
ai_service = AIService()
