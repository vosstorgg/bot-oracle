"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
"""
import logging

logger = logging.getLogger(__name__)


async def remove_message_buttons_by_id(context, chat_id, message_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ–≥–æ ID
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await context.bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=None
        )
        logger.info(f"üîç DEBUG: –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
        return True
    except Exception as e:
        logger.warning(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return False


async def remove_message_buttons(context, chat_id, exclude_texts=None):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (fallback –º–µ—Ç–æ–¥)
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
        exclude_texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    """
    if exclude_texts is None:
        exclude_texts = []
    
    try:
        updates = await context.bot.get_updates(offset=-1, limit=10)
        buttons_removed = 0
        
        for update in updates:
            if (update.message and 
                update.message.chat.id == int(chat_id) and
                update.message.text and 
                update.message.reply_markup and
                not any(exclude_text in update.message.text for exclude_text in exclude_texts)):
                try:
                    logger.info(f"üîç DEBUG: –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text[:100]}...")
                    await update.message.edit_reply_markup(reply_markup=None)
                    buttons_removed += 1
                    if buttons_removed >= 2:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        break
                except Exception as e:
                    logger.warning(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue
                    
        return buttons_removed
        
    except Exception as e:
        logger.error(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å updates: {e}")
        return 0


async def remove_date_selection_message_by_id(context, chat_id, message_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –ø–æ –µ–≥–æ ID
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"üîç DEBUG: –£–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã {message_id}")
        return True
    except Exception as e:
        logger.warning(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã {message_id}: {e}")
        return False


async def remove_date_selection_message(context, chat_id):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è —ç—Ç–æ—Ç —Å–æ–Ω?" (fallback –º–µ—Ç–æ–¥)
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
    """
    try:
        updates = await context.bot.get_updates(offset=-1, limit=10)
        
        for update in updates:
            if (update.message and 
                update.message.chat.id == int(chat_id) and
                update.message.text and
                "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è —ç—Ç–æ—Ç —Å–æ–Ω" in update.message.text):
                try:
                    logger.info(f"üîç DEBUG: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã")
                    await update.message.delete()
                    return True
                except Exception as e:
                    logger.warning(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: {e}")
                    continue
                    
        return False
        
    except Exception as e:
        logger.error(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å updates –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã: {e}")
        return False


async def cleanup_astrological_interface_by_ids(context, chat_id, original_message_id=None, date_message_id=None):
    """
    –û—á–∏—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥)
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
        original_message_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º
        date_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    """
    success_count = 0
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if original_message_id:
        if await remove_message_buttons_by_id(context, chat_id, original_message_id):
            success_count += 1
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    if date_message_id:
        if await remove_date_selection_message_by_id(context, chat_id, date_message_id):
            success_count += 1
    
    logger.info(f"üîç DEBUG: –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ ID - —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {success_count}")
    return success_count > 0


async def cleanup_astrological_interface(context, chat_id, current_message_text=""):
    """
    –û—á–∏—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è - —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (fallback –º–µ—Ç–æ–¥)
    
    Args:
        context: Telegram context
        chat_id: ID —á–∞—Ç–∞
        current_message_text: –¢–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ)
    """
    exclude_texts = [
        current_message_text,
        "üîÆ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º",
        "–ö–æ–≥–¥–∞ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª—Å—è —ç—Ç–æ—Ç —Å–æ–Ω"
    ]
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    buttons_removed = await remove_message_buttons(context, chat_id, exclude_texts)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    date_message_removed = await remove_date_selection_message(context, chat_id)
    
    logger.info(f"üîç DEBUG: –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - —É–±—Ä–∞–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons_removed}, —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞—Ç–æ–π: {date_message_removed}")
    
    return buttons_removed > 0 or date_message_removed


def log_error_and_notify(db, user, chat_id, error_type, error_message):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    Args:
        db: Database instance
        user: Telegram user
        chat_id: ID —á–∞—Ç–∞
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    logger.error(f"‚ùå {error_type}: {error_message}")
    db.log_activity(user, chat_id, error_type, str(error_message))
