import os
import asyncio
import psycopg2
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import Forbidden, BadRequest, NetworkError
from openai import AsyncOpenAI

today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")

# --- OpenAI client ---
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- PostgreSQL connection ---
conn = psycopg2.connect(
    host=os.getenv("PGHOST"),
    port=os.getenv("PGPORT"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE")
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü ---
def init_tables():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    with conn.cursor() as cur:
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_stats (
                chat_id VARCHAR(20) PRIMARY KEY,
                username VARCHAR(100),
                messages_sent INTEGER DEFAULT 0,
                symbols_sent INTEGER DEFAULT 0,
                starts_count INTEGER DEFAULT 0,
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_activity_log (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                username VARCHAR(100),
                chat_id VARCHAR(20),
                action VARCHAR(50),
                content TEXT,
                timestamp TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id SERIAL PRIMARY KEY,
                chat_id VARCHAR(20) NOT NULL,
                role VARCHAR(20) NOT NULL,
                content TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_messages_chat_id_timestamp 
            ON messages (chat_id, timestamp DESC)
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_profile (
                chat_id VARCHAR(20) PRIMARY KEY,
                username VARCHAR(100),
                gender VARCHAR(20),
                age_group VARCHAR(20),
                lucid_dreaming VARCHAR(20),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        """)
    
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_tables()

MAX_TOKENS = 1400
MAX_HISTORY = 10

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ ---
# ADMIN_CHAT_ID - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å ID –∞–¥–º–∏–Ω–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, —Ç–∞–∫ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—ã–µ)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "234526032")
ADMIN_CHAT_IDS = ADMIN_CHAT_ID.split(",") if ADMIN_CHAT_ID else []
ADMIN_CHAT_IDS = [chat_id.strip() for chat_id in ADMIN_CHAT_IDS if chat_id.strip()]

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è broadcast ---
admin_broadcast_states = {}

# --- Default system prompt ---
DEFAULT_SYSTEM_PROMPT = (
    "You are a qualified dream analyst trained in the methodology of C.G. Jung, with deep knowledge of astrology and esotericism, working within the Western psychological tradition. You interpret dreams as unique messages from the unconscious, drawing on archetypes, symbols, and the collective unconscious. You may reference mythology, astrology, or esoteric concepts metaphorically, if they enrich meaning and maintain internal coherence. Use simple, clear, human language. Avoid quotation marks for symbols and refrain from using specialized terminology. Your task is to identify key images, archetypes, and symbols, and explain their significance for inner development. You do not predict the future, give advice, or act as a therapist. Interpretations must be hypothetical, respectful, and free from rigid or generic meanings. If the user provides the date and location of the dream and requests it, include metaphorical astrological context (e.g. Moon phase, the current planetary positions). If the dream is brief, you may ask 1‚Äì3 clarifying questions. If the user declines, interpret only what is available. Maintain a supportive and respectful tone. Match the user's style‚Äîconcise or detailed, light or deep. Never use obscene language, even if requested; replace it with appropriate, standard synonyms. Do not engage in unrelated topics‚Äîgently guide the conversation back to dream analysis. Use only Telegram Markdown formatting (e.g. *bold*, _italic_, `code`) and emojis to illustrate symbols (e.g. üåë, üëÅ, ü™û). Do not use HTML. "
"\n\n# User context\n" "Use a paragraph of text to suggest the dream's emotional tone. Try to end your analysis by inviting the user to reflect or respond. Speak Russian using informal '—Ç—ã' form with users."   
)

# --- Default menu ---
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        ["üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω"],
        ["üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


# --- –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def log_activity(user, chat_id, action, content=""):
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_activity_log (user_id, username, chat_id, action, content)
                VALUES (%s, %s, %s, %s, %s)
            """, (
                user.id,
                f"@{user.username}" if user.username else None,
                chat_id,
                action,
                content[:1000]
            ))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        conn.rollback()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def update_user_stats(user, chat_id: str, message_text: str):
    username = f"@{user.username}" if user.username else None

    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_stats (chat_id, username, messages_sent, symbols_sent, updated_at)
                VALUES (%s, %s, 1, %s, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET 
                    messages_sent = user_stats.messages_sent + 1,
                    symbols_sent = user_stats.symbols_sent + %s,
                    username = COALESCE(EXCLUDED.username, user_stats.username),
                    updated_at = now()
            """, (
                chat_id,
                username,
                len(message_text),
                len(message_text)
            ))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        conn.rollback()

def increment_start_count(user, chat_id: str):
    username = f"@{user.username}" if user.username else None
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_stats (chat_id, username, starts_count, updated_at)
                VALUES (%s, %s, 1, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET 
                    starts_count = user_stats.starts_count + 1,
                    username = COALESCE(EXCLUDED.username, user_stats.username),
                    updated_at = now()
            """, (
                chat_id,
                username
            ))
        conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤: {e}")
        conn.rollback()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id in admin_broadcast_states and admin_broadcast_states[chat_id].get("waiting_for_content"):
        await handle_admin_broadcast_content(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫—É
    if chat_id in admin_broadcast_states and admin_broadcast_states[chat_id].get("waiting_for_confirmation"):
        await handle_admin_broadcast_confirmation(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ text –∏–ª–∏ caption –¥–ª—è –º–µ–¥–∏–∞)
    user_message = ""
    if update.message.text:
        user_message = update.message.text
    elif update.message.caption:
        user_message = update.message.caption
    
    if user_message == "üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω":
        await start_first_dream_command(update, context)
        return

    if user_message == "üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞":
        await channel_view_command(update, context)
        return

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤
    if not user_message:
        await update.message.reply_text(
            "ü§î –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω —Å–ª–æ–≤–∞–º–∏, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ–Ω—è—Ç—å.",
            reply_markup=MAIN_MENU
        )
        return

    log_activity(user, chat_id, "message", user_message)
    log_activity(user, chat_id, "gpt_request", f"model=gpt-4o, temp=0.4, max_tokens={MAX_TOKENS}")

    update_user_stats(user, chat_id, user_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "user", user_message, datetime.now(timezone.utc)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s ORDER BY timestamp DESC LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(rows)]

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            SELECT gender, age_group, lucid_dreaming FROM user_profile
            WHERE chat_id = %s
        """, (chat_id,))
        profile = cur.fetchone()

    profile_info = ""
    if profile:
        gender, age_group, lucid = profile
        if gender:
            profile_info += f"User gender: {gender}. "
        if age_group:
            profile_info += f"User age group: {age_group}. "
        if lucid:
            profile_info += f"Lucid dream experience: {lucid}. "

    # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    personalized_prompt = DEFAULT_SYSTEM_PROMPT
    personalized_prompt += f"\n\n# Current date\nToday is {today_str}."
    if profile_info:
        personalized_prompt += f"\n\n# User context\n{profile_info.strip()}"


    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é...")

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": personalized_prompt}] + history,
            temperature=0.45,
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
        
        log_activity(user, chat_id, "dream_interpreted", reply[:300])
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "assistant", reply, datetime.now(timezone.utc)))

    await thinking_msg.edit_text(reply, parse_mode='Markdown')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤
    log_activity(user, str(chat_id), "start")
    increment_start_count(user, str(chat_id))

    # Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üßæ –ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", callback_data="start_profile")],
        [InlineKeyboardButton("üîÆ –ß—Ç–æ —è —É–º–µ—é", callback_data="about")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞", url="https://t.me/N_W_passage")],
        [InlineKeyboardButton("üíé –î–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="donate")],
        [InlineKeyboardButton("üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        with open("intro.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=(
                    "üí´ –°–Ω—ã ‚Äì —ç—Ç–æ —è–∑—ã–∫ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ. "
                    "–ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
                    "–ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è."
                ),
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    except FileNotFoundError:
        await update.message.reply_text(
            "üí´ –°–Ω—ã ‚Äì —ç—Ç–æ —è–∑—ã–∫ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ. "
            "–ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
            "–ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è.",
            
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    await update.message.reply_text(
        text="–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –∏ —è –Ω–∞—á–Ω—É —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏–µ",
        reply_markup=MAIN_MENU
    )

async def start_first_dream_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. "
        "–û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä–æ–¥).",
        reply_markup=MAIN_MENU 
    )

async def channel_view_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–õ—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞.\n\n–°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è",
        
        reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/N_W_passage")]
                ])
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")

    if query.data == "about":
        with open("about.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="–Ø ‚Äì —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —Å–Ω—ã. –ú–æ—è –æ—Å–Ω–æ–≤–∞ ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –º–µ—Ç–æ–¥–∏–∫–∞ –ö–∞—Ä–ª–∞ –Æ–Ω–≥–∞. –ú–Ω–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Å–æ–Ω ‚Äì –¥–∞–∂–µ —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–π ‚Äì –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ—ë –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ.\n\n–Ø –±–µ—Ä–µ–∂–Ω–æ –ø–æ–º–æ–≥–∞—é, –Ω–µ –æ—Å—É–∂–¥–∞—é –∏ –Ω–µ –¥–∞—é –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—é —Å–º—ã—Å–ª–æ–≤. –Ø –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–º ‚Äî —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–¥–æ–π—Ç–∏ –∫ —Å–µ–±–µ, –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∑–Ω–∞–Ω–∏—é, –∫ —Ç–æ–º—É, —á—Ç–æ –æ–±—ã—á–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–µ–Ω–∏.\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüåô –¢–æ–ª–∫—É—é —Å–Ω—ã —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –æ–±—Ä–∞–∑—ã, –∞—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Å–∏–º–≤–æ–ª—ã\nüí¨ –£—á–∏—Ç—ã–≤–∞—é —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ ‚Äì –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å–µ—Ä—å—ë–∑–Ω–æ –∏–ª–∏ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é\nü¶Ñ –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —Å —Ç–æ–±–æ–π —Å–∏–º–≤–æ–ª–∏–∫—É —Å–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\nü™ê–ü–æ –∑–∞–ø—Ä–æ—Å—É ‚Äì —É—á–∏—Ç—ã–≤–∞—é –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è\nüïäÔ∏è–ì–æ–≤–æ—Ä—é —Å —Ç–æ–±–æ–π –±–µ—Ä–µ–∂–Ω–æ –∏ –ø–æ–º–æ–≥–∞—é –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–æ–Ω, –∫–∞–∫ –Ω–∞ –ø—É—Ç—å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–π —Å–æ–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å",
                
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
                ])
            )
    
    elif query.data == "donate":
        with open("donate.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üí∞–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –£ –Ω–∞—Å –µ—â—ë –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url="https://pay.cloudtips.ru/p/4f1dd4bf")]
                    #[InlineKeyboardButton("–ö–æ—Ñ–µ —Å —Ç–æ—Ä—Ç–∏–∫–æ–º (500 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=500")],
                    #[InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (1000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=1000")],
                    #[InlineKeyboardButton("–ë–æ–ª—å—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (2000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=2000")],
                    #[InlineKeyboardButton("–û–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (5000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=5000")]
                ])
            )

    elif query.data == "start_profile":
        with open("quiz.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üßæ –í—Å–µ–≥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –ª—É—á—à–µ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Å–Ω—ã.\n\n–ù–∞—á–Ω—ë–º?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞—á–∏–Ω–∞–µ–º", callback_data="profile_step:gender")],
                    [InlineKeyboardButton("–î–∞–≤–∞–π –Ω–µ —Å–µ–π—á–∞—Å", callback_data="profile_step:skip")]
                ])
            )

    elif query.data == "profile_step:gender":
        context.user_data['profile_step'] = "gender"
        await query.message.reply_text(
            "–°–∏–º–≤–æ–ª–∏–∫–∞ —Å–Ω–æ–≤ —É –∂–µ–Ω—â–∏–Ω –∏ –º—É–∂—á–∏–Ω –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –¢—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender:female")],
                [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="gender:male")],
                [InlineKeyboardButton("–ù–µ —Å–∫–∞–∂—É", callback_data="gender:other")]
            ])
        )

    elif query.data == "profile_step:skip":
        await query.message.reply_text("–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

    elif query.data.startswith("gender:"):
        gender = query.data.split(":")[1]
        context.user_data['gender'] = gender
        context.user_data['profile_step'] = "age"

        await query.message.reply_text(
            "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∂–µ –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ 18", callback_data="age:<18")],
                [InlineKeyboardButton("18‚Äì30", callback_data="age:18-30")],
                [InlineKeyboardButton("31‚Äì50", callback_data="age:31-50")],
                [InlineKeyboardButton("50+", callback_data="age:50+")]
            ])
        )

    elif query.data.startswith("age:"):
        age = query.data.split(":")[1]
        context.user_data['age_group'] = age
        context.user_data['profile_step'] = "lucid"

        await query.message.reply_text(
            "–ë—ã–≤–∞—é—Ç –ª–∏ —É —Ç–µ–±—è –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã (–ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Å–ø–∏—à—å –∏ –º–æ–∂–µ—à—å –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –≤–æ —Å–Ω–µ)?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–∞—Å—Ç–æ", callback_data="lucid:—á–∞—Å—Ç–æ")],
                [InlineKeyboardButton("–ò–Ω–æ–≥–¥–∞", callback_data="lucid:–∏–Ω–æ–≥–¥–∞")],
                [InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞", callback_data="lucid:–Ω–∏–∫–æ–≥–¥–∞")]
            ])
        )

    elif query.data.startswith("lucid:"):
        lucid = query.data.split(":")[1]
        context.user_data['lucid_dreaming'] = lucid
        context.user_data['profile_step'] = None

        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_profile (chat_id, username, gender, age_group, lucid_dreaming, updated_at)
                VALUES (%s, %s, %s, %s, %s, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET gender = EXCLUDED.gender,
                    age_group = EXCLUDED.age_group,
                    lucid_dreaming = EXCLUDED.lucid_dreaming,
                    updated_at = now()
            """, (
                str(update.effective_chat.id),
                f"@{update.effective_user.username}" if update.effective_user.username else None,
                context.user_data.get('gender'),
                context.user_data.get('age_group'),
                lucid
            ))
        conn.commit()

        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ!\n–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–Ω–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
        ])
    )
        
    elif query.data == "start_first_dream":
        await query.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. –û–ø–∏—à–∏, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —É—á—ë–ª –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏ ‚Äì —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –∫—Ä—É–ø–Ω–æ–º—É –≥–æ—Ä–æ–¥—É)"
    )
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
    elif query.data == "admin_broadcast":
        await admin_broadcast_callback(update, context)
    
    elif query.data == "admin_stats":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(CASE WHEN updated_at >= NOW() - INTERVAL '24 hours' THEN 1 END) as active_24h,
                    COUNT(CASE WHEN updated_at >= NOW() - INTERVAL '7 days' THEN 1 END) as active_7d,
                    SUM(messages_sent) as total_messages
                FROM user_stats
            """)
            stats = cur.fetchone()
        
        if stats:
            total, active_24h, active_7d, total_messages = stats
            await query.edit_message_text(
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total or 0}\n"
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h or 0}\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {active_7d or 0}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages or 0}",
                parse_mode='Markdown'
            )
    
    elif query.data == "admin_activity":
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT action, COUNT(*) as count
                    FROM user_activity_log 
                    WHERE timestamp >= NOW() - INTERVAL '24 hours'
                    GROUP BY action
                    ORDER BY count DESC
                    LIMIT 10
                """)
                activities = cur.fetchall()
            
            if activities:
                activity_text = "\n".join([f"‚Ä¢ {action}: {count}" for action, count in activities])
                await query.edit_message_text(
                    f"üìã *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞*\n\n{activity_text}",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            await query.edit_message_text("üìã –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif query.data == "broadcast_confirm_yes":
        await handle_broadcast_confirm_yes(update, context)
    
    elif query.data == "broadcast_confirm_no":
        await handle_broadcast_confirm_no(update, context)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è broadcast ---

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT chat_id 
                FROM user_stats 
                WHERE chat_id IS NOT NULL 
                GROUP BY chat_id
                ORDER BY MAX(updated_at) DESC
            """)
            users = cur.fetchall()
            return [str(user[0]) for user in users]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

async def send_broadcast_message_content(context, chat_id: str, content_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.) –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if content_data["type"] == "text":
            await context.bot.send_message(
                chat_id=chat_id,
                text=content_data["text"],
                parse_mode='Markdown'
            )
        elif content_data["type"] == "photo":
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "document":
            await context.bot.send_document(
                chat_id=chat_id,
                document=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "video":
            await context.bot.send_video(
                chat_id=chat_id,
                video=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "audio":
            await context.bot.send_audio(
                chat_id=chat_id,
                audio=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "voice":
            await context.bot.send_voice(
                chat_id=chat_id,
                voice=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "sticker":
            await context.bot.send_sticker(
                chat_id=chat_id,
                sticker=content_data["file_id"]
            )
        
        return {"status": "success", "chat_id": chat_id}
    except Forbidden:
        return {"status": "blocked", "chat_id": chat_id}
    except BadRequest:
        return {"status": "error", "chat_id": chat_id}
    except NetworkError:
        return {"status": "network_error", "chat_id": chat_id}
    except Exception as e:
        return {"status": "unknown_error", "chat_id": chat_id, "error": str(e)}

async def send_broadcast_message(context, chat_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return await send_broadcast_message_content(context, chat_id, {
        "type": "text",
        "text": message
    })

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    log_activity(user, chat_id, "broadcast_command", "admin used broadcast")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.args:
        await update.message.reply_text(
            "üì¢ *–ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–æ—Ç–µ!`",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    broadcast_text = " ".join(context.args)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await update.message.reply_text(
        f"üì° *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{broadcast_text[:100]}{'...' if len(broadcast_text) > 100 else ''}`",
        parse_mode='Markdown'
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "success": 0,
        "blocked": 0, 
        "error": 0,
        "network_error": 0,
        "unknown_error": 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å rate limiting
    for i, user_chat_id in enumerate(users, 1):
        result = await send_broadcast_message(context, user_chat_id, broadcast_text)
        results[result["status"]] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 50 == 0 or i == total_users:
            await progress_msg.edit_text(
                f"üì° *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...*\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {results['blocked']}\n"
                f"‚ùå –û—à–∏–±–∫–∏: {results['error'] + results['network_error'] + results['unknown_error']}",
                parse_mode='Markdown'
            )
        
        # Rate limiting - 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram
        await asyncio.sleep(0.05)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    await progress_msg.edit_text(
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {results['blocked']}\n"
        f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['error']}\n"
        f"üåê –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏: {results['network_error']}\n"
        f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏: {results['unknown_error']}\n\n"
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(results['success']/total_users*100):.1f}%",
        parse_mode='Markdown'
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_activity(user, chat_id, "broadcast_completed", 
                f"sent to {results['success']}/{total_users} users")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    log_activity(user, chat_id, "admin_panel", "admin accessed admin panel")
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞", callback_data="admin_activity")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    admin_broadcast_states[chat_id] = {"waiting_for_content": True}
    
    await query.edit_message_text(
        "üì¢ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "‚ú® *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:*\n"
        "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
        "‚Ä¢ üé• –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
        "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ üéµ –ê—É–¥–∏–æ\n"
        "‚Ä¢ üó£ –ì–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "‚Ä¢ üòä –°—Ç–∏–∫–µ—Ä—ã\n\n"
        "üí° *–î–ª—è –æ—Ç–º–µ–Ω—ã* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel`",
        parse_mode='Markdown'
    )

async def handle_admin_broadcast_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip() == "/cancel":
        admin_broadcast_states.pop(chat_id, None)
        await message.reply_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    content_data = None
    preview_text = ""
    
    if message.text:
        content_data = {
            "type": "text",
            "text": message.text
        }
        preview_text = f"üìù *–¢–µ–∫—Å—Ç:* {message.text[:100]}{'...' if len(message.text) > 100 else ''}"
        
    elif message.photo:
        content_data = {
            "type": "photo",
            "file_id": message.photo[-1].file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üì∑ *–§–æ—Ç–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.document:
        content_data = {
            "type": "document", 
            "file_id": message.document.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç:* {message.document.file_name or '—Ñ–∞–π–ª'} {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.video:
        content_data = {
            "type": "video",
            "file_id": message.video.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üé• *–í–∏–¥–µ–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.audio:
        content_data = {
            "type": "audio",
            "file_id": message.audio.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üéµ *–ê—É–¥–∏–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.voice:
        content_data = {
            "type": "voice",
            "file_id": message.voice.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üó£ *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.sticker:
        content_data = {
            "type": "sticker",
            "file_id": message.sticker.file_id
        }
        preview_text = f"üòä *–°—Ç–∏–∫–µ—Ä*"
    
    if not content_data:
        await message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    admin_broadcast_states[chat_id] = {
        "waiting_for_confirmation": True,
        "content": content_data,
        "preview": preview_text
    }
    
    log_activity(user, chat_id, "broadcast_content_prepared", f"type: {content_data['type']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="broadcast_confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        f"üì° *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"*–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{preview_text}\n\n"
        f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {total_users}\n\n"
        f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_admin_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏)"""
    chat_id = str(update.effective_chat.id)
    message = update.message
    
    if message.text and message.text.strip().lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞", "–Ω–µ—Ç", "no"]:
        admin_broadcast_states.pop(chat_id, None)
        await message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )

async def handle_broadcast_confirm_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞
    if (chat_id not in admin_broadcast_states or 
        not admin_broadcast_states[chat_id].get("waiting_for_confirmation") or
        chat_id not in ADMIN_CHAT_IDS):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_data = admin_broadcast_states[chat_id]
    content_data = broadcast_data["content"]
    preview_text = broadcast_data["preview"]
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_broadcast_states.pop(chat_id, None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await query.edit_message_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
    log_activity(user, chat_id, "broadcast_started", f"type: {content_data['type']}, users: {total_users}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await query.edit_message_text(
        f"üì° *–ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
        f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
        parse_mode='Markdown'
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "success": 0,
        "blocked": 0, 
        "error": 0,
        "network_error": 0,
        "unknown_error": 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å rate limiting
    for i, user_chat_id in enumerate(users, 1):
        result = await send_broadcast_message_content(context, user_chat_id, content_data)
        results[result["status"]] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 50 == 0 or i == total_users:
            try:
                await progress_msg.edit_text(
                    f"üì° *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...*\n\n"
                    f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}\n"
                    f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {results['blocked']}\n"
                    f"‚ùå –û—à–∏–±–∫–∏: {results['error'] + results['network_error'] + results['unknown_error']}",
                    parse_mode='Markdown'
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # Rate limiting - 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram
        await asyncio.sleep(0.05)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    try:
        await progress_msg.edit_text(
            f"‚úÖ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n\n"
            f"üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {results['blocked']}\n"
            f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['error']}\n"
            f"üåê –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏: {results['network_error']}\n"
            f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏: {results['unknown_error']}\n\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(results['success']/total_users*100):.1f}%",
            parse_mode='Markdown'
        )
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {results['success']}/{total_users} ({(results['success']/total_users*100):.1f}%)"
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_activity(user, chat_id, "broadcast_completed", 
                f"sent to {results['success']}/{total_users} users, type: {content_data['type']}")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    chat_id = str(update.effective_chat.id)
    
    if chat_id in admin_broadcast_states:
        admin_broadcast_states.pop(chat_id, None)
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )

async def handle_broadcast_confirm_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_broadcast_states.pop(chat_id, None)
    
    await query.edit_message_text(
        "‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode='Markdown'
    )
