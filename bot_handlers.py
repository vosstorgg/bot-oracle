import os
import asyncio
import psycopg2
import io
import tempfile
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import Forbidden, BadRequest, NetworkError
from openai import AsyncOpenAI

today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")

# --- OpenAI client ---
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- PostgreSQL connection ---
conn = psycopg2.connect(
    host=os.getenv("PGHOST"),
    port=os.getenv("PGPORT"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE")
)

MAX_TOKENS = 1400
MAX_HISTORY = 10

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤ ---
ADMIN_CHAT_IDS = os.getenv("ADMIN_CHAT_IDS", "234526032").split(",")
ADMIN_CHAT_IDS = [chat_id.strip() for chat_id in ADMIN_CHAT_IDS if chat_id.strip()]

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è broadcast ---
admin_broadcast_states = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–Ω–æ–≤ ---
def init_dreams_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    with conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS dreams (
                id SERIAL PRIMARY KEY,
                chat_id VARCHAR(20) NOT NULL,
                dream_text TEXT NOT NULL,
                interpretation TEXT NOT NULL,
                source_type VARCHAR(10) NOT NULL DEFAULT 'text',
                created_at TIMESTAMP DEFAULT NOW(),
                dream_date DATE DEFAULT CURRENT_DATE,
                tags TEXT[] DEFAULT '{}'
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_dreams_chat_id_date 
            ON dreams (chat_id, created_at DESC)
        """)
    conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_dreams_table()

# --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —ç–º–æ–¥–∑–∏ ---
def extract_message_type(ai_response: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–º–æ–¥–∑–∏"""
    if ai_response.startswith('üåô'):
        return 'dream'
    elif ai_response.startswith('‚ùì'):
        return 'question'
    elif ai_response.startswith('üí≠'):
        return 'chat'
    else:
        return 'unknown'

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–æ–≤ –≤ –¥–Ω–µ–≤–Ω–∏–∫ ---
def save_dream_to_diary(chat_id: str, dream_text: str, interpretation: str, source_type: str = 'text', dream_date: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO dreams (chat_id, dream_text, interpretation, source_type, dream_date)
                VALUES (%s, %s, %s, %s, %s)
            """, (
                chat_id,
                dream_text,
                interpretation,
                source_type,
                dream_date if dream_date else datetime.now(timezone.utc).date()
            ))
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞: {e}")
        return False

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_dreams(chat_id: str, limit: int = 10, offset: int = 0):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    with conn.cursor() as cur:
        cur.execute("""
            SELECT id, dream_text, interpretation, source_type, created_at, dream_date
            FROM dreams 
            WHERE chat_id = %s 
            ORDER BY created_at DESC 
            LIMIT %s OFFSET %s
        """, (chat_id, limit, offset))
        return cur.fetchall()

# --- –ü–æ–¥—Å—á–µ—Ç —Å–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def count_user_dreams(chat_id: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with conn.cursor() as cur:
        cur.execute("""
            SELECT COUNT(*) FROM dreams WHERE chat_id = %s
        """, (chat_id,))
        return cur.fetchone()[0]

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞ ---
def delete_dream(chat_id: str, dream_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                DELETE FROM dreams 
                WHERE id = %s AND chat_id = %s
            """, (dream_id, chat_id))
            deleted_count = cur.rowcount
        conn.commit()
        return deleted_count > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–∞: {e}")
        return False

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–Ω–∞ ---
def get_dream_by_id(chat_id: str, dream_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–Ω –ø–æ ID"""
    with conn.cursor() as cur:
        cur.execute("""
            SELECT id, dream_text, interpretation, source_type, created_at, dream_date
            FROM dreams 
            WHERE id = %s AND chat_id = %s
        """, (dream_id, chat_id))
        return cur.fetchone()

# --- Default system prompt ---
DEFAULT_SYSTEM_PROMPT = """You are a qualified dream analyst trained in the methodology of C.G. Jung, with deep knowledge of astrology and esotericism, working within the Western psychological tradition. You interpret dreams as unique messages from the unconscious, drawing on archetypes, symbols, and the collective unconscious. You may reference mythology, astrology, or esoteric concepts metaphorically, if they enrich meaning and maintain internal coherence. Use simple, clear, human language. Avoid quotation marks for symbols and refrain from using specialized terminology. Your task is to identify key images, archetypes, and symbols, and explain their significance for inner development. You do not predict the future, give advice, or act as a therapist. Interpretations must be hypothetical, respectful, and free from rigid or generic meanings. If the user provides the date and location of the dream and requests it, include metaphorical astrological context (e.g. Moon phase, the current planetary positions). If the dream is brief, you may ask 1‚Äì3 clarifying questions. If the user declines, interpret only what is available. Maintain a supportive and respectful tone. Match the user's style‚Äîconcise or detailed, light or deep. Never use obscene language, even if requested; replace it with appropriate, standard synonyms. Do not engage in unrelated topics‚Äîgently guide the conversation back to dream analysis. Use only Telegram Markdown formatting (e.g. *bold*, _italic_, `code`) and emojis to illustrate symbols (e.g. üåë, üëÅ, ü™û). Do not use HTML. Use a paragraph of text to suggest the dream's emotional tone. Try to end your analysis by inviting the user to reflect or respond. Speak Russian using informal '—Ç—ã' form with users. Start answers with üåô for dream descriptions, ‚ùì for symbol questions, üí≠ for dialogue."""

# --- Default menu ---
MAIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        ["üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω"],
        ["üìñ –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", "üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


# --- –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def log_activity(user, chat_id, action, content=""):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_activity_log (user_id, username, chat_id, action, content)
            VALUES (%s, %s, %s, %s, %s)
        """, (
            user.id,
            f"@{user.username}" if user.username else None,
            chat_id,
            action,
            content[:1000]
        ))
    conn.commit()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def update_user_stats(user, chat_id: str, message_text: str):
    username = f"@{user.username}" if user.username else None

    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_stats (chat_id, username, messages_sent, symbols_sent, updated_at)
            VALUES (%s, %s, 1, %s, now())
            ON CONFLICT (chat_id) DO UPDATE
            SET 
                messages_sent = user_stats.messages_sent + 1,
                symbols_sent = user_stats.symbols_sent + %s,
                username = COALESCE(EXCLUDED.username, user_stats.username),
                updated_at = now()
        """, (
            chat_id,
            username,
            len(message_text),
            len(message_text)
        ))
    conn.commit()

def increment_start_count(user, chat_id: str):
    username = f"@{user.username}" if user.username else None
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_stats (chat_id, username, starts_count, updated_at)
            VALUES (%s, %s, 1, now())
            ON CONFLICT (chat_id) DO UPDATE
            SET 
                starts_count = user_stats.starts_count + 1,
                username = COALESCE(EXCLUDED.username, user_stats.username),
                updated_at = now()
        """, (
            chat_id,
            username
        ))
    conn.commit()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id in admin_broadcast_states and admin_broadcast_states[chat_id].get("waiting_for_content"):
        await handle_admin_broadcast_content(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫—É
    if chat_id in admin_broadcast_states and admin_broadcast_states[chat_id].get("waiting_for_confirmation"):
        await handle_admin_broadcast_confirmation(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if update.message.voice:
        await handle_voice_message(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ text –∏–ª–∏ caption –¥–ª—è –º–µ–¥–∏–∞)
    user_message = ""
    if update.message.text:
        user_message = update.message.text
    elif update.message.caption:
        user_message = update.message.caption
    
    if user_message == "üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω":
        await start_first_dream_command(update, context)
        return

    if user_message == "üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞":
        await channel_view_command(update, context)
        return
    
    if user_message == "üìñ –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤":
        await show_dream_diary(update, context)
        return

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤
    if not user_message:
        await update.message.reply_text(
            "ü§î –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ–Ω—è—Ç—å.",
            reply_markup=MAIN_MENU
        )
        return

    log_activity(user, chat_id, "message", user_message)
    log_activity(user, chat_id, "gpt_request", f"model=gpt-4o, temp=0.4, max_tokens={MAX_TOKENS}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞
    await process_dream_text(update, context, user_message, thinking_msg)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤
    log_activity(user, str(chat_id), "start")
    increment_start_count(user, str(chat_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    await send_start_menu(chat_id, context, user)
        
    await update.message.reply_text(
        text="–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –∏ —è –Ω–∞—á–Ω—É —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏–µ",
        reply_markup=MAIN_MENU
    )

async def start_first_dream_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. "
        "–û–ø–∏—à–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä–æ–¥).",
        reply_markup=MAIN_MENU 
    )

async def channel_view_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–õ—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞.\n\n–°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è",
        
        reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/N_W_passage")]
                ])
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")

    if query.data == "about":
        with open("about.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="–Ø ‚Äì —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —Å–Ω—ã. –ú–æ—è –æ—Å–Ω–æ–≤–∞ ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –º–µ—Ç–æ–¥–∏–∫–∞ –ö–∞—Ä–ª–∞ –Æ–Ω–≥–∞. –ú–Ω–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Å–æ–Ω ‚Äì –¥–∞–∂–µ —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–π ‚Äì –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ—ë –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ.\n\n–Ø –±–µ—Ä–µ–∂–Ω–æ –ø–æ–º–æ–≥–∞—é, –Ω–µ –æ—Å—É–∂–¥–∞—é –∏ –Ω–µ –¥–∞—é –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—é —Å–º—ã—Å–ª–æ–≤. –Ø –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–º ‚Äî —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–¥–æ–π—Ç–∏ –∫ —Å–µ–±–µ, –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∑–Ω–∞–Ω–∏—é, –∫ —Ç–æ–º—É, —á—Ç–æ –æ–±—ã—á–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–µ–Ω–∏.\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüåô –¢–æ–ª–∫—É—é —Å–Ω—ã —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –æ–±—Ä–∞–∑—ã, –∞—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Å–∏–º–≤–æ–ª—ã\nüí¨ –£—á–∏—Ç—ã–≤–∞—é —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ ‚Äì –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å–µ—Ä—å—ë–∑–Ω–æ –∏–ª–∏ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é\nü¶Ñ –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —Å —Ç–æ–±–æ–π —Å–∏–º–≤–æ–ª–∏–∫—É —Å–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\nü™ê–ü–æ –∑–∞–ø—Ä–æ—Å—É ‚Äì —É—á–∏—Ç—ã–≤–∞—é –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è\nüïäÔ∏è–ì–æ–≤–æ—Ä—é —Å —Ç–æ–±–æ–π –±–µ—Ä–µ–∂–Ω–æ –∏ –ø–æ–º–æ–≥–∞—é –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–æ–Ω, –∫–∞–∫ –Ω–∞ –ø—É—Ç—å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–π —Å–æ–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å",
                
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
                ])
            )
    
    elif query.data == "donate":
        with open("donate.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üí∞–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –£ –Ω–∞—Å –µ—â—ë –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url="https://pay.cloudtips.ru/p/4f1dd4bf")]
                    #[InlineKeyboardButton("–ö–æ—Ñ–µ —Å —Ç–æ—Ä—Ç–∏–∫–æ–º (500 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=500")],
                    #[InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (1000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=1000")],
                    #[InlineKeyboardButton("–ë–æ–ª—å—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (2000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=2000")],
                    #[InlineKeyboardButton("–û–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (5000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=5000")]
                ])
            )

    elif query.data == "start_profile":
        with open("quiz.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üßæ –í—Å–µ–≥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –ª—É—á—à–µ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Å–Ω—ã.\n\n–ù–∞—á–Ω—ë–º?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞—á–∏–Ω–∞–µ–º", callback_data="profile_step:gender")],
                    [InlineKeyboardButton("–î–∞–≤–∞–π –Ω–µ —Å–µ–π—á–∞—Å", callback_data="profile_step:skip")]
                ])
            )

    elif query.data == "profile_step:gender":
        context.user_data['profile_step'] = "gender"
        await query.message.reply_text(
            "–°–∏–º–≤–æ–ª–∏–∫–∞ —Å–Ω–æ–≤ —É –∂–µ–Ω—â–∏–Ω –∏ –º—É–∂—á–∏–Ω –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –¢—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender:female")],
                [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="gender:male")],
                [InlineKeyboardButton("–ù–µ —Å–∫–∞–∂—É", callback_data="gender:other")]
            ])
        )

    elif query.data == "profile_step:skip":
        await query.message.reply_text("–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

    elif query.data.startswith("gender:"):
        gender = query.data.split(":")[1]
        context.user_data['gender'] = gender
        context.user_data['profile_step'] = "age"

        await query.message.reply_text(
            "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∂–µ –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ 18", callback_data="age:<18")],
                [InlineKeyboardButton("18‚Äì30", callback_data="age:18-30")],
                [InlineKeyboardButton("31‚Äì50", callback_data="age:31-50")],
                [InlineKeyboardButton("50+", callback_data="age:50+")]
            ])
        )

    elif query.data.startswith("age:"):
        age = query.data.split(":")[1]
        context.user_data['age_group'] = age
        context.user_data['profile_step'] = "lucid"

        await query.message.reply_text(
            "–ë—ã–≤–∞—é—Ç –ª–∏ —É —Ç–µ–±—è –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã (–ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Å–ø–∏—à—å –∏ –º–æ–∂–µ—à—å –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –≤–æ —Å–Ω–µ)?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–∞—Å—Ç–æ", callback_data="lucid:—á–∞—Å—Ç–æ")],
                [InlineKeyboardButton("–ò–Ω–æ–≥–¥–∞", callback_data="lucid:–∏–Ω–æ–≥–¥–∞")],
                [InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞", callback_data="lucid:–Ω–∏–∫–æ–≥–¥–∞")]
            ])
        )

    elif query.data.startswith("lucid:"):
        lucid = query.data.split(":")[1]
        context.user_data['lucid_dreaming'] = lucid
        context.user_data['profile_step'] = None

        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_profile (chat_id, username, gender, age_group, lucid_dreaming, updated_at)
                VALUES (%s, %s, %s, %s, %s, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET gender = EXCLUDED.gender,
                    age_group = EXCLUDED.age_group,
                    lucid_dreaming = EXCLUDED.lucid_dreaming,
                    updated_at = now()
            """, (
                str(update.effective_chat.id),
                f"@{update.effective_user.username}" if update.effective_user.username else None,
                context.user_data.get('gender'),
                context.user_data.get('age_group'),
                lucid
            ))
        conn.commit()

        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ!\n–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–Ω–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
        ])
    )
        
    elif query.data == "start_first_dream":
        await query.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. –û–ø–∏—à–∏, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —É—á—ë–ª –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏ ‚Äì —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –∫—Ä—É–ø–Ω–æ–º—É –≥–æ—Ä–æ–¥—É)"
    )
    
    # –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ callback'–∏
    elif query.data.startswith("diary_page:"):
        page = int(query.data.split(":")[1])
        await show_dream_diary_callback(update, context, page)
    
    elif query.data.startswith("dream_view:"):
        dream_id = int(query.data.split(":")[1])
        await show_dream_detail(update, context, dream_id)
    
    elif query.data.startswith("dream_delete:"):
        dream_id = int(query.data.split(":")[1])
        await delete_dream_confirm(update, context, dream_id)
    
    elif query.data.startswith("dream_delete_yes:"):
        dream_id = int(query.data.split(":")[1])
        chat_id = str(update.effective_chat.id)
        user = update.effective_user
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–Ω
        if delete_dream(chat_id, dream_id):
            log_activity(user, chat_id, "dream_deleted", f"dream_id:{dream_id}")
            await query.edit_message_text(
                "‚úÖ *–°–æ–Ω —É–¥–∞–ª–µ–Ω*\n\n–°–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìñ –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_page:0")
                ]]),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                "‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìñ –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_page:0")
                ]]),
                parse_mode='Markdown'
            )
    
    elif query.data == "main_menu":
        chat_id = query.message.chat_id
        user = query.from_user
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.delete_message()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        await send_start_menu(chat_id, context, user)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
    elif query.data == "admin_broadcast":
        await admin_broadcast_callback(update, context)
    
    elif query.data == "admin_stats":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(CASE WHEN updated_at >= NOW() - INTERVAL '24 hours' THEN 1 END) as active_24h,
                    COUNT(CASE WHEN updated_at >= NOW() - INTERVAL '7 days' THEN 1 END) as active_7d,
                    SUM(messages_sent) as total_messages
                FROM user_stats
            """)
            stats = cur.fetchone()
        
        if stats:
            total, active_24h, active_7d, total_messages = stats
            await query.edit_message_text(
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total or 0}\n"
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h or 0}\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {active_7d or 0}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages or 0}",
                parse_mode='Markdown'
            )
    
    elif query.data == "admin_activity":
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        with conn.cursor() as cur:
            cur.execute("""
                SELECT action, COUNT(*) as count
                FROM user_activity_log 
                WHERE timestamp >= NOW() - INTERVAL '24 hours'
                GROUP BY action
                ORDER BY count DESC
                LIMIT 10
            """)
            activities = cur.fetchall()
        
        if activities:
            activity_text = "\n".join([f"‚Ä¢ {action}: {count}" for action, count in activities])
            await query.edit_message_text(
                f"üìã *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞*\n\n{activity_text}",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif query.data == "broadcast_confirm_yes":
        await handle_broadcast_confirm_yes(update, context)
    
    elif query.data == "broadcast_confirm_no":
        await handle_broadcast_confirm_no(update, context)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è broadcast ---

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with conn.cursor() as cur:
        cur.execute("""
            SELECT chat_id 
            FROM user_stats 
            WHERE chat_id IS NOT NULL 
            GROUP BY chat_id
            ORDER BY MAX(updated_at) DESC
        """)
        users = cur.fetchall()
        return [str(user[0]) for user in users]

async def send_broadcast_message_content(context, chat_id: str, content_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.) –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if content_data["type"] == "text":
            await context.bot.send_message(
                chat_id=chat_id,
                text=content_data["text"],
                parse_mode='Markdown'
            )
        elif content_data["type"] == "photo":
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "document":
            await context.bot.send_document(
                chat_id=chat_id,
                document=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "video":
            await context.bot.send_video(
                chat_id=chat_id,
                video=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "audio":
            await context.bot.send_audio(
                chat_id=chat_id,
                audio=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "voice":
            await context.bot.send_voice(
                chat_id=chat_id,
                voice=content_data["file_id"],
                caption=content_data.get("caption", ""),
                parse_mode='Markdown'
            )
        elif content_data["type"] == "sticker":
            await context.bot.send_sticker(
                chat_id=chat_id,
                sticker=content_data["file_id"]
            )
        
        return {"status": "success", "chat_id": chat_id}
    except Forbidden:
        return {"status": "blocked", "chat_id": chat_id}
    except BadRequest:
        return {"status": "error", "chat_id": chat_id}
    except NetworkError:
        return {"status": "network_error", "chat_id": chat_id}
    except Exception as e:
        return {"status": "unknown_error", "chat_id": chat_id, "error": str(e)}

async def send_broadcast_message(context, chat_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return await send_broadcast_message_content(context, chat_id, {
        "type": "text",
        "text": message
    })

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    log_activity(user, chat_id, "broadcast_command", "admin used broadcast")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.args:
        await update.message.reply_text(
            "üì¢ *–ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–æ—Ç–µ!`",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    broadcast_text = " ".join(context.args)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await update.message.reply_text(
        f"üì° *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{broadcast_text[:100]}{'...' if len(broadcast_text) > 100 else ''}`",
        parse_mode='Markdown'
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "success": 0,
        "blocked": 0, 
        "error": 0,
        "network_error": 0,
        "unknown_error": 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å rate limiting
    for i, user_chat_id in enumerate(users, 1):
        result = await send_broadcast_message(context, user_chat_id, broadcast_text)
        results[result["status"]] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 50 == 0 or i == total_users:
            await progress_msg.edit_text(
                f"üì° *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...*\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {results['blocked']}\n"
                f"‚ùå –û—à–∏–±–∫–∏: {results['error'] + results['network_error'] + results['unknown_error']}",
                parse_mode='Markdown'
            )
        
        # Rate limiting - 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram
        await asyncio.sleep(0.05)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    await progress_msg.edit_text(
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {results['blocked']}\n"
        f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['error']}\n"
        f"üåê –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏: {results['network_error']}\n"
        f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏: {results['unknown_error']}\n\n"
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(results['success']/total_users*100):.1f}%",
        parse_mode='Markdown'
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_activity(user, chat_id, "broadcast_completed", 
                f"sent to {results['success']}/{total_users} users")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    log_activity(user, chat_id, "admin_panel", "admin accessed admin panel")
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats")],
        [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞", callback_data="admin_activity")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    if chat_id not in ADMIN_CHAT_IDS:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    admin_broadcast_states[chat_id] = {"waiting_for_content": True}
    
    await query.edit_message_text(
        "üì¢ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "‚ú® *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:*\n"
        "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
        "‚Ä¢ üé• –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
        "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ üéµ –ê—É–¥–∏–æ\n"
        "‚Ä¢ üó£ –ì–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "‚Ä¢ üòä –°—Ç–∏–∫–µ—Ä—ã\n\n"
        "üí° *–î–ª—è –æ—Ç–º–µ–Ω—ã* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel`",
        parse_mode='Markdown'
    )

async def handle_admin_broadcast_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip() == "/cancel":
        admin_broadcast_states.pop(chat_id, None)
        await message.reply_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    content_data = None
    preview_text = ""
    
    if message.text:
        content_data = {
            "type": "text",
            "text": message.text
        }
        preview_text = f"üìù *–¢–µ–∫—Å—Ç:* {message.text[:100]}{'...' if len(message.text) > 100 else ''}"
        
    elif message.photo:
        content_data = {
            "type": "photo",
            "file_id": message.photo[-1].file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üì∑ *–§–æ—Ç–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.document:
        content_data = {
            "type": "document", 
            "file_id": message.document.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç:* {message.document.file_name or '—Ñ–∞–π–ª'} {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.video:
        content_data = {
            "type": "video",
            "file_id": message.video.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üé• *–í–∏–¥–µ–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.audio:
        content_data = {
            "type": "audio",
            "file_id": message.audio.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üéµ *–ê—É–¥–∏–æ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.voice:
        content_data = {
            "type": "voice",
            "file_id": message.voice.file_id,
            "caption": message.caption or ""
        }
        preview_text = f"üó£ *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* {('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption[:50] + '...') if message.caption and len(message.caption) > 50 else ('—Å –ø–æ–¥–ø–∏—Å—å—é: ' + message.caption) if message.caption else ''}"
        
    elif message.sticker:
        content_data = {
            "type": "sticker",
            "file_id": message.sticker.file_id
        }
        preview_text = f"üòä *–°—Ç–∏–∫–µ—Ä*"
    
    if not content_data:
        await message.reply_text(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    admin_broadcast_states[chat_id] = {
        "waiting_for_confirmation": True,
        "content": content_data,
        "preview": preview_text
    }
    
    log_activity(user, chat_id, "broadcast_content_prepared", f"type: {content_data['type']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="broadcast_confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        f"üì° *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"*–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{preview_text}\n\n"
        f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {total_users}\n\n"
        f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_admin_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏)"""
    chat_id = str(update.effective_chat.id)
    message = update.message
    
    if message.text and message.text.strip().lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞", "–Ω–µ—Ç", "no"]:
        admin_broadcast_states.pop(chat_id, None)
        await message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )

async def handle_broadcast_confirm_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞
    if (chat_id not in admin_broadcast_states or 
        not admin_broadcast_states[chat_id].get("waiting_for_confirmation") or
        chat_id not in ADMIN_CHAT_IDS):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_data = admin_broadcast_states[chat_id]
    content_data = broadcast_data["content"]
    preview_text = broadcast_data["preview"]
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_broadcast_states.pop(chat_id, None)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await query.edit_message_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
    log_activity(user, chat_id, "broadcast_started", f"type: {content_data['type']}, users: {total_users}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await query.edit_message_text(
        f"üì° *–ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
        f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
        parse_mode='Markdown'
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "success": 0,
        "blocked": 0, 
        "error": 0,
        "network_error": 0,
        "unknown_error": 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å rate limiting
    for i, user_chat_id in enumerate(users, 1):
        result = await send_broadcast_message_content(context, user_chat_id, content_data)
        results[result["status"]] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 50 == 0 or i == total_users:
            try:
                await progress_msg.edit_text(
                    f"üì° *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...*\n\n"
                    f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}\n"
                    f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {results['blocked']}\n"
                    f"‚ùå –û—à–∏–±–∫–∏: {results['error'] + results['network_error'] + results['unknown_error']}",
                    parse_mode='Markdown'
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # Rate limiting - 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram
        await asyncio.sleep(0.05)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    try:
        await progress_msg.edit_text(
            f"‚úÖ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"*–ö–æ–Ω—Ç–µ–Ω—Ç:* {preview_text}\n\n"
            f"üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {results['success']}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {results['blocked']}\n"
            f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['error']}\n"
            f"üåê –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏: {results['network_error']}\n"
            f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏: {results['unknown_error']}\n\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(results['success']/total_users*100):.1f}%",
            parse_mode='Markdown'
        )
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {results['success']}/{total_users} ({(results['success']/total_users*100):.1f}%)"
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log_activity(user, chat_id, "broadcast_completed", 
                f"sent to {results['success']}/{total_users} users, type: {content_data['type']}")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    chat_id = str(update.effective_chat.id)
    
    if chat_id in admin_broadcast_states:
        admin_broadcast_states.pop(chat_id, None)
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )

async def handle_broadcast_confirm_no(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_broadcast_states.pop(chat_id, None)
    
    await query.edit_message_text(
        "‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode='Markdown'
    )

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é ---
async def send_start_menu(chat_id, context, user):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    log_activity(user, str(chat_id), "start_menu_shown")
    
    # Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("üßæ –ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", callback_data="start_profile")],
        [InlineKeyboardButton("üîÆ –ß—Ç–æ —è —É–º–µ—é", callback_data="about")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞", url="https://t.me/N_W_passage")],
        [InlineKeyboardButton("üíé –î–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="donate")],
        [InlineKeyboardButton("üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω", callback_data="start_first_dream")],
        [InlineKeyboardButton("üìñ –î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤", callback_data="diary_page:0")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        with open("intro.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=(
                    "üí´ –°–Ω—ã ‚Äì —ç—Ç–æ —è–∑—ã–∫ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ. "
                    "–ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
                    "–ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è."
                ),
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "üí´ –°–Ω—ã ‚Äì —ç—Ç–æ —è–∑—ã–∫ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ. "
                "–ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
                "–ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è."
            ),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# --- UI –î–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–æ–≤ ---
async def show_dream_diary(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    log_activity(user, chat_id, "dream_diary_opened", f"page:{page}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    dreams = get_user_dreams(chat_id, limit=10, offset=page * 10)
    total_dreams = count_user_dreams(chat_id)
    
    if not dreams:
        await update.message.reply_text(
            "üìñ *–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ –ø—É—Å—Ç*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ–Ω—è—Ç—å! "
            "–í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–¥–µ—Å—å.",
            reply_markup=MAIN_MENU,
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤
    total_pages = (total_dreams + 9) // 10  # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
    current_page = page + 1
    
    message_text = f"üìñ *–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤* (—Å—Ç—Ä. {current_page}/{total_pages})\n\n"
    
    keyboard = []
    
    for i, dream in enumerate(dreams):
        dream_id, dream_text, interpretation, source_type, created_at, dream_date = dream
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ (–ø–µ—Ä–≤—ã–µ 60 —Å–∏–º–≤–æ–ª–æ–≤)
        dream_preview = dream_text[:60] + "..." if len(dream_text) > 60 else dream_text
        
        # –ò–∫–æ–Ω–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_icon = "üé§" if source_type == "voice" else "‚úçÔ∏è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = created_at.strftime("%d.%m.%Y")
        
        message_text += f"{source_icon} *{date_str}*\n{dream_preview}\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∞
        keyboard.append([InlineKeyboardButton(
            f"üìñ –°–æ–Ω {i+1 + page*10}", 
            callback_data=f"dream_view:{dream_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"diary_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"diary_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_dream_diary_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤ —á–µ—Ä–µ–∑ callback (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    log_activity(user, chat_id, "dream_diary_page", f"page:{page}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    dreams = get_user_dreams(chat_id, limit=10, offset=page * 10)
    total_dreams = count_user_dreams(chat_id)
    
    if not dreams:
        await query.edit_message_text(
            "üìñ *–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ –ø—É—Å—Ç*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø–æ–Ω—è—Ç—å! "
            "–í—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–¥–µ—Å—å.",
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤
    total_pages = (total_dreams + 9) // 10
    current_page = page + 1
    
    message_text = f"üìñ *–î–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤* (—Å—Ç—Ä. {current_page}/{total_pages})\n\n"
    
    keyboard = []
    
    for i, dream in enumerate(dreams):
        dream_id, dream_text, interpretation, source_type, created_at, dream_date = dream
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞
        dream_preview = dream_text[:60] + "..." if len(dream_text) > 60 else dream_text
        source_icon = "üé§" if source_type == "voice" else "‚úçÔ∏è"
        date_str = created_at.strftime("%d.%m.%Y")
        
        message_text += f"{source_icon} *{date_str}*\n{dream_preview}\n\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üìñ –°–æ–Ω {i+1 + page*10}", 
            callback_data=f"dream_view:{dream_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"diary_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"diary_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_dream_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–æ–Ω —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    log_activity(user, chat_id, "dream_detail_viewed", f"dream_id:{dream_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–Ω
    dream = get_dream_by_id(chat_id, dream_id)
    
    if not dream:
        await query.edit_message_text(
            "‚ùå –°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìñ –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_page:0")
            ]])
        )
        return
    
    dream_id, dream_text, interpretation, source_type, created_at, dream_date = dream
    
    # –ò–∫–æ–Ω–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_icon = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" if source_type == "voice" else "‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = created_at.strftime("%d.%m.%Y –≤ %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
    message_text = (
        f"üìñ *–°–æ–Ω –æ—Ç {date_str}*\n"
        f"{source_icon}\n\n"
        f"*üåô –û–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞:*\n{dream_text}\n\n"
        f"*‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n{interpretation}"
    )
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(message_text) > 4000:
        message_text = message_text[:3900] + "\n\n_...—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ_"
    
    keyboard = [
        [
            InlineKeyboardButton("üìñ –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_page:0"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"dream_delete:{dream_id}")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def delete_dream_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"dream_delete_yes:{dream_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dream_view:{dream_id}")
        ]
    ]
    
    await query.edit_message_text(
        "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–æ–Ω –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π —á–µ—Ä–µ–∑ Whisper API"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    voice = update.message.voice
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if voice.duration < 2:  # –ú–µ–Ω—å—à–µ 2 —Å–µ–∫—É–Ω–¥ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ
        await update.message.reply_text(
            "ü§î –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=MAIN_MENU
        )
        log_activity(user, chat_id, "voice_too_short", f"duration: {voice.duration}s")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text(
        "üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
        reply_markup=MAIN_MENU
    )
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        voice_file = await context.bot.get_file(voice.file_id)
        voice_data = await voice_file.download_as_bytearray()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        log_activity(user, chat_id, "voice_message", f"duration: {voice.duration}s")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Whisper API
        with tempfile.NamedTemporaryFile(suffix=".oga", delete=False) as temp_file:
            temp_file.write(voice_data)
            temp_file_path = temp_file.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper API –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            with open(temp_file_path, "rb") as audio_file:
                transcription = await openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                )
            
            transcribed_text = transcription.text.strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
            log_activity(user, chat_id, "voice_transcribed", transcribed_text[:100])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ Whisper
            # –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π AI
            suspicious_phrases = [
                # –†—É—Å—Å–∫–∏–µ —Ç–∏—Ç—Ä—ã/—Å—É–±—Ç–∏—Ç—Ä—ã (–æ—á–µ–Ω—å —á–∞—Å—Ç—ã–µ)
                "—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä", "—Å—É–±—Ç–∏—Ç—Ä—ã", "—Ç–∏—Ç—Ä—ã",
                "—Å–∏–Ω–µ—Ü–∫–∞—è", "–µ–≥–æ—Ä–æ–≤–∞", "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫", "–æ–∑–≤—É—á–∫–∞",
                
                # –ü—Ä–æ—â–∞–Ω–∏—è YouTube/–ø–æ–¥–∫–∞—Å—Ç–æ–≤
                "–≤—Å–µ–º –ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ",
                "—É–≤–∏–¥–∏–º—Å—è", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–ø–æ–∫–∞ –ø–æ–∫–∞",
                
                # YouTube –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å", "—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                "like", "subscribe", "bell icon", "notification",
                
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ YouTube –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏  
                "thank you for watching", "thanks for watching",
                "don't forget to subscribe", "hit the like button",
                "ring the bell", "see you next time",
                
                # –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏
                "–º—É–∑—ã–∫–∞", "–º–µ–ª–æ–¥–∏—è", "–ø—Ä–∏–ø–µ–≤", "–∫—É–ø–ª–µ—Ç",
                "music", "‚ô™", "‚ô´", "instrumental",
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                "—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–º–∏–∫—Ä–æ—Ñ–æ–Ω", "–∑–≤—É–∫",
                "test", "testing", "check", "audio",
                "one two three", "—Ä–∞–∑ –¥–≤–∞ —Ç—Ä–∏",
                
                # –ö–æ—Ä–æ—Ç–∫–∏–µ –º–µ–∂–¥–æ–º–µ—Ç–∏—è (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã –µ—Å–ª–∏ —ç—Ç–æ –≤—Å—ë)
                "–º–º–º", "—ç—ç—ç", "–∞–∞–∞", "–º–º–º-—Ö–º–º", "—É–≥—É", "–∞–≥–∞",
                "hmm", "uh", "um", "ah", "oh",
                
                # –§—Ä–∞–∑—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π/–¢–í
                "–≤ —ç—Ñ–∏—Ä–µ", "–Ω–æ–≤–æ—Å—Ç–∏", "–ø–æ–≥–æ–¥–∞", "—Ä–µ–∫–ª–∞–º–∞",
                "–∏ —Å–µ–π—á–∞—Å", "–∞ —Ç–µ–ø–µ—Ä—å", "–¥–∞–ª–µ–µ",
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–Ω–æ–≤)
                "api", "json", "html", "css", "javascript",
                "python", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å–∞–π—Ç",
                
                # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ Whisper –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ —Ç–∏—à–∏–Ω–µ
                "you", "the", "for", "and", "that", "this",
                "–Ω–æ", "—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∑–∞—á–µ–º",
                
                # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                "–ª–∞ –ª–∞ –ª–∞", "tra la la", "na na na",
                "–¥–∞ –¥–∞ –¥–∞", "–Ω–µ—Ç –Ω–µ—Ç –Ω–µ—Ç", "yes yes yes",
                
                # –§—Ä–∞–∑—ã –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ª–µ–∫—Ü–∏–∏/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏)
                "—Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥", "–∫–∞–∫ –≤–∏–¥–∏—Ç–µ", "–∏—Ç–∞–∫",
                "next slide", "as you can see", "so",
                "–≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å", "questions", "any questions",
                
                # –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∏ (—á–∞—Å—Ç–æ –≤ —Ç–∏—Ç—Ä–∞—Ö)
                "00:", "01:", "02:", "–º–∏–Ω—É—Ç–∞", "—Å–µ–∫—É–Ω–¥–∞",
                "chapter", "part", "episode", "—Å–µ—Ä–∏—è",
                
                # –ò–º–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π (—á–∞—Å—Ç–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∏—Ä—É—é—Ç—Å—è)
                "–ø—É—Ç–∏–Ω", "biden", "trump", "–º–∞—Å–∫", "musk",
                "steve jobs", "–¥–∂–æ–±—Å", "–±–∏–ª–ª –≥–µ–π—Ç—Å",
                
                # –ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç—ã
                "copyright", "all rights reserved", "–∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞",
                "tm", "trademark", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞",
                
                # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                "telegram", "whatsapp", "instagram", "facebook",
                "tiktok", "youtube", "vk", "–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            text_lower = transcribed_text.lower()
            
            # 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è–º–∏
            has_suspicious_phrase = any(phrase.lower() in text_lower for phrase in suspicious_phrases)
            
            # 2. –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
            words_count = len(transcribed_text.split())
            is_too_short_text = words_count < 3 and voice.duration > 3
            
            # 3. –¢–æ–ª—å–∫–æ –º–µ–∂–¥–æ–º–µ—Ç–∏—è –∏ –∑–≤—É–∫–∏
            only_interjections = all(word.lower() in ['–º–º–º', '—ç—ç—ç', '–∞–∞–∞', '–æ—Ö', '–∞—Ö', '—É–≥—É', '–∞–≥–∞', '—Ö–º', '—ç–º', 'um', 'uh', 'ah', 'oh', 'hmm'] 
                                   for word in transcribed_text.split())
            
            # 4. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–ø—Ä–∏–∑–Ω–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤)
            has_repetitive_chars = any(char * 3 in transcribed_text for char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èabcdefghijklmnopqrstuvwxyz')
            
            is_suspicious = (has_suspicious_phrase and voice.duration < 8) or is_too_short_text or only_interjections or has_repetitive_chars
            
            if not transcribed_text or is_suspicious:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                rejection_reason = "empty" if not transcribed_text else "suspicious"
                if is_suspicious:
                    if has_suspicious_phrase:
                        rejection_reason += "_phrase"
                    if is_too_short_text:
                        rejection_reason += "_short"
                    if only_interjections:
                        rejection_reason += "_interjections"
                    if has_repetitive_chars:
                        rejection_reason += "_repetitive"
                
                log_activity(user, chat_id, "voice_rejected", f"{rejection_reason}: {transcribed_text[:50]}")
                
                try:
                    await processing_msg.edit_text(
                        "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                        reply_markup=MAIN_MENU
                    )
                except BadRequest:
                    await update.message.reply_text(
                        "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                        reply_markup=MAIN_MENU
                    )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
            try:
                await processing_msg.edit_text(
                    f"üé§ ‚ûú üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* {transcribed_text}\n\n"
                    f"„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...",
                    parse_mode='Markdown'
                )
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–Ω–æ–º
                await process_dream_text(update, context, transcribed_text, processing_msg)
            except BadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await update.message.reply_text(
                    f"üé§ ‚ûú üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* {transcribed_text}",
                    parse_mode='Markdown'
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...")
                await process_dream_text(update, context, transcribed_text, thinking_msg)
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
                
    except Exception as e:
        log_activity(user, chat_id, "voice_error", str(e))
        try:
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                reply_markup=MAIN_MENU
            )
        except BadRequest:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                reply_markup=MAIN_MENU
            )

async def process_dream_text(update: Update, context: ContextTypes.DEFAULT_TYPE, dream_text: str, message_to_edit=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∞ —á–µ—Ä–µ–∑ OpenAI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö)"""
    chat_id = str(update.effective_chat.id)
    user = update.effective_user
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_stats(user, chat_id, dream_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "user", dream_text, datetime.now(timezone.utc)))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s ORDER BY timestamp DESC LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(rows)]
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            SELECT gender, age_group, lucid_dreaming FROM user_profile
            WHERE chat_id = %s
        """, (chat_id,))
        profile = cur.fetchone()
    
    profile_info = ""
    if profile:
        gender, age_group, lucid = profile
        if gender:
            profile_info += f"User gender: {gender}. "
        if age_group:
            profile_info += f"User age group: {age_group}. "
        if lucid:
            profile_info += f"Lucid dream experience: {lucid}. "
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    personalized_prompt = DEFAULT_SYSTEM_PROMPT
    personalized_prompt += f"\n\n# Current date\nToday is {today_str}."
    if profile_info:
        personalized_prompt += f"\n\n# User context\n{profile_info.strip()}"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": personalized_prompt}] + history,
            temperature=0.45,
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
        
        log_activity(user, chat_id, "dream_interpreted", reply[:300])
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫
        message_type = extract_message_type(reply)
        if message_type == 'dream':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è)
            source_type = 'voice' if message_to_edit else 'text'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫
            dream_saved = save_dream_to_diary(
                chat_id=chat_id, 
                dream_text=dream_text, 
                interpretation=reply,
                source_type=source_type
            )
            
            if dream_saved:
                log_activity(user, chat_id, "dream_saved_to_diary", f"type:{source_type}")
            else:
                log_activity(user, chat_id, "dream_save_failed", f"type:{source_type}")
        
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: {e}"
        log_activity(user, chat_id, "openai_error", str(e))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "assistant", reply, datetime.now(timezone.utc)))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if message_to_edit:
        try:
            await message_to_edit.edit_text(reply, parse_mode='Markdown')
        except BadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(reply, parse_mode='Markdown', reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text(reply, parse_mode='Markdown', reply_markup=MAIN_MENU)
