import os
import psycopg2
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, CallbackQueryHandler, filters
)
from openai import AsyncOpenAI

# --- OpenAI client ---
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- PostgreSQL connection ---
conn = psycopg2.connect(
    host=os.getenv("PGHOST"),
    port=os.getenv("PGPORT"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE")
)

MAX_TOKENS = 1000
MAX_HISTORY = 10

# --- Default system prompt ---
DEFAULT_SYSTEM_PROMPT = (
    "You are a dream analyst trained in the Jungian tradition. Your interpretations rely on archetypes, symbols, and the collective unconscious, "
    "based on the works of C.G. Jung, M.-L. von Franz, ARAS, the Jung Institute Z√ºrich, and Chevalier & Gheerbrant's Dictionary of Symbols, including The Book of Symbols. "
    "Treat each dream as a unique message from the unconscious. Identify key images and archetypes. Interpret them hypothetically, clearly, and respectfully ‚Äî never predict the future or make categorical claims. "
    "Always consider the dream's characters, setting, atmosphere, and structure. Use simple language, avoid clinical or overly technical terms, and structure your reply into logical paragraphs. "
    "Use only Telegram Markdown formatting (e.g. *bold*, _italic_, `code`) and emojis to illustrate symbols (e.g. üåë, üëÅ, ü™û). Do not use HTML. "
    "If the dream is too brief, ask up to 3 clarifying questions. If refused, proceed carefully with the available content. "
    "If the user asks non-dream-related questions, gently redirect to dream interpretation. Never offer life advice, coaching, or therapeutic guidance. "
    "Replace any inappropriate or obscene language with respectful synonyms and continue. Always remain in your role as a symbolic interpreter."
    "\n\n# User context\n"
)

# --- –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def log_activity(user, chat_id, action, content=""):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_activity_log (user_id, username, chat_id, action, content)
            VALUES (%s, %s, %s, %s, %s)
        """, (
            user.id,
            f"@{user.username}" if user.username else None,
            chat_id,
            action,
            content[:1000]
        ))
    conn.commit()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = str(update.effective_chat.id)
    user = update.effective_user

    log_activity(user, chat_id, "message", user_message)
    log_activity(user, chat_id, "gpt_request", f"model=gpt-4o, temp=0.4, max_tokens={MAX_TOKENS}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "user", user_message, datetime.now(timezone.utc)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s ORDER BY timestamp DESC LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(rows)]

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            SELECT gender, age_group, lucid_dreaming FROM user_profile
            WHERE chat_id = %s
        """, (chat_id,))
        profile = cur.fetchone()

    profile_info = ""
    if profile:
        gender, age_group, lucid = profile
        if gender:
            profile_info += f"User gender: {gender}. "
        if age_group:
            profile_info += f"User age group: {age_group}. "
        if lucid:
            profile_info += f"Lucid dream experience: {lucid}. "

    # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
    personalized_prompt = DEFAULT_SYSTEM_PROMPT
    if profile_info:
        personalized_prompt += f"\n\n# User context\n{profile_info.strip()}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("üëÅ‚Äçüó® –ò–∑—É—á–∞—é...")

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": personalized_prompt}] + history,
            temperature=0.4,
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
        log_activity(user, chat_id, "dream_interpreted", reply[:300])
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "assistant", reply, datetime.now(timezone.utc)))

    await thinking_msg.edit_text(reply, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    log_activity(update.effective_user, str(update.effective_chat.id), "start")

    keyboard = [
        [InlineKeyboardButton("üßæ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ", callback_data="start_profile")],
        [InlineKeyboardButton("üß† –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="about")],
        [InlineKeyboardButton("üíé –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –±–æ—Ç—É", callback_data="donate")],
        [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        with open("intro.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å –°–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥–ª—è –∫–æ–≥–æ —è —Ç—Ä–∞–∫—Ç—É—é —Å–Ω—ã. –ò–ª–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã",
                reply_markup=reply_markup
            )
    except FileNotFoundError:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å –°–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥–ª—è –∫–æ–≥–æ —è —Ç—Ä–∞–∫—Ç—É—é —Å–Ω—ã. –ò–ª–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")

    if query.data == "about":
    with open("about.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=photo,
            caption="–Ø –¢–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
            ])
        )
    
    elif query.data == "donate":
    with open("donate.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=photo,
            caption="üí∏ –°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–∞—à–∫–∞ –∫–æ—Ñ–µ (200 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=200")],
                [InlineKeyboardButton("–ö–æ—Ñ–µ —Å —Ç–æ—Ä—Ç–∏–∫–æ–º (500 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=500")],
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (1000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=1000")],
                [InlineKeyboardButton("–ë–æ–ª—å—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (2000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=2000")],
                [InlineKeyboardButton("–û–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (5000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=5000")]
            ])
        )

    elif query.data == "start_profile":
    with open("quiz.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=photo,
            caption="üßæ –Ø —Ö–æ—á—É –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω–∏–º–∞—Ç—å. –ê–Ω–∫–µ—Ç–∞ –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã –∏ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏.\n\n–ù–∞—á–Ω—ë–º?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞, –Ω–∞—á–∞—Ç—å", callback_data="profile_step:gender")],
                [InlineKeyboardButton("–ü–æ–∑–∂–µ", callback_data="profile_step:skip")]
            ])
        )

    elif query.data == "profile_step:gender":
        context.user_data['profile_step'] = "gender"
        await query.message.reply_text(
            "üßæ –í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender:male")],
                [InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:female")],
                [InlineKeyboardButton("–î—Ä—É–≥–æ–µ / –ù–µ–≤–∞–∂–Ω–æ", callback_data="gender:other")]
            ])
        )

    elif query.data == "profile_step:skip":
        await query.message.reply_text("–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

    elif query.data.startswith("gender:"):
        gender = query.data.split(":")[1]
        context.user_data['gender'] = gender
        context.user_data['profile_step'] = "age"

        await query.message.reply_text(
            "üë§ –í–æ–ø—Ä–æ—Å 2 –∏–∑ 3:\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ 18", callback_data="age:<18")],
                [InlineKeyboardButton("18‚Äì30", callback_data="age:18-30")],
                [InlineKeyboardButton("31‚Äì50", callback_data="age:31-50")],
                [InlineKeyboardButton("50+", callback_data="age:50+")]
            ])
        )

    elif query.data.startswith("age:"):
        age = query.data.split(":")[1]
        context.user_data['age_group'] = age
        context.user_data['profile_step'] = "lucid"

        await query.message.reply_text(
            "üåô –í–æ–ø—Ä–æ—Å 3 –∏–∑ 3:\n\n–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–∞—Å—Ç–æ", callback_data="lucid:—á–∞—Å—Ç–æ")],
                [InlineKeyboardButton("–ò–Ω–æ–≥–¥–∞", callback_data="lucid:–∏–Ω–æ–≥–¥–∞")],
                [InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞", callback_data="lucid:–Ω–∏–∫–æ–≥–¥–∞")]
            ])
        )

    elif query.data.startswith("lucid:"):
        lucid = query.data.split(":")[1]
        context.user_data['lucid_dreaming'] = lucid
        context.user_data['profile_step'] = None

        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_profile (chat_id, username, gender, age_group, lucid_dreaming, updated_at)
                VALUES (%s, %s, %s, %s, %s, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET gender = EXCLUDED.gender,
                    age_group = EXCLUDED.age_group,
                    lucid_dreaming = EXCLUDED.lucid_dreaming,
                    updated_at = now()
            """, (
                str(update.effective_chat.id),
                f"@{update.effective_user.username}" if update.effective_user.username else None,
                context.user_data.get('gender'),
                context.user_data.get('age_group'),
                lucid
            ))
        conn.commit()

        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª –¥–ª—è —Å–µ–±—è –æ—Ç–≤–µ—Ç—ã.\n–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–Ω–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
        ])
    )
        
    elif query.data == "start_first_dream":
        await query.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ ‚Äî –∫—Ç–æ –≤ —Ç–≤–æ—ë–º —Å–Ω–µ, –≥–¥–µ —Ç—ã –±—ã–ª, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª. "
        "–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è. –Ø –≤–µ—Å—å –≤–Ω–∏–º–∞–Ω–∏–µ..."
    )


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
