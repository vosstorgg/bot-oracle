import os
import openai
import psycopg2
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# üîê API –∫–ª—é—á–∏
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
MAX_HISTORY = 1000  # –ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å

# üóÉ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(
    host=os.environ["PGHOST"],
    port=os.environ["PGPORT"],
    user=os.environ["PGUSER"],
    password=os.environ["PGPASSWORD"],
    database=os.environ["PGDATABASE"]
)
conn.autocommit = True

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
with conn.cursor() as cur:
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            chat_id TEXT,
            role TEXT,
            content TEXT,
            timestamp TIMESTAMP DEFAULT NOW()
        );
    """)

# –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
with conn.cursor() as cur:
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_stats (
            chat_id TEXT PRIMARY KEY,
            messages_sent INTEGER DEFAULT 0,
            symbols_sent INTEGER DEFAULT 0,
            updated_at TIMESTAMP DEFAULT NOW()
        );
    """)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with conn.cursor() as cur:
        cur.execute("SELECT 1 FROM user_stats WHERE chat_id = %s", (chat_id,))
        is_new_user = cur.fetchone() is None

    with open("oracle.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –û—Ä–∞–∫—É–ª, —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ GPT-4.\n\n"
                 "–ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å–Ω—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è.\n"
                 "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –Ω–æ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.\n\n"
                 "–ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO messages (chat_id, role, content, timestamp) VALUES (%s, %s, %s, %s)",
            (chat_id, "user", user_message, datetime.utcnow())
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_stats (chat_id, messages_sent, symbols_sent)
            VALUES (%s, 1, %s)
            ON CONFLICT (chat_id)
            DO UPDATE SET
                messages_sent = user_stats.messages_sent + 1,
                symbols_sent = user_stats.symbols_sent + EXCLUDED.symbols_sent,
                updated_at = NOW()
        """, (chat_id, len(user_message)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s
            ORDER BY timestamp DESC
            LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": role, "content": content} for role, content in reversed(rows)]

    # GPT-–æ—Ç–≤–µ—Ç
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=history + [
                {
                    "role": "system",
                    "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π 3000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
                }
            ],
            max_tokens=1000
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ OpenAI: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO messages (chat_id, role, content, timestamp) VALUES (%s, %s, %s, %s)",
            (chat_id, "assistant", reply, datetime.utcnow())
        )

    await update.message.reply_text(reply)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
