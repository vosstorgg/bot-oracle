import os
import psycopg2
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, CallbackQueryHandler, filters
)
from openai import AsyncOpenAI

# --- OpenAI client ---
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- PostgreSQL connection ---
conn = psycopg2.connect(
    host=os.getenv("PGHOST"),
    port=os.getenv("PGPORT"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE")
)

MAX_TOKENS = 1400
MAX_HISTORY = 10

# --- Default system prompt ---
DEFAULT_SYSTEM_PROMPT = (
    "You are a dream analyst trained in the Jungian tradition. Your interpretations rely on archetypes, symbols, and the collective unconscious, "
    "based on the works of C.G. Jung, M.-L. von Franz, ARAS, the Jung Institute Z√ºrich, and Chevalier & Gheerbrant's Dictionary of Symbols, including The Book of Symbols. "
    "Treat each dream as a unique message from the unconscious. Identify key images and archetypes. Interpret them hypothetically, clearly, and respectfully ‚Äî never predict the future or make categorical claims. "
    "Always consider the dream's characters, setting, atmosphere, and structure. Use simple language, avoid clinical or overly technical terms, and structure your reply into logical paragraphs. "
    "Use only Telegram Markdown formatting (e.g. *bold*, _italic_, `code`) and emojis to illustrate symbols (e.g. üåë, üëÅ, ü™û). Do not use HTML. "
    "If the dream is too brief, ask up to 3 clarifying questions. If refused, proceed carefully with the available content. "
    "If the user asks non-dream-related questions, gently redirect to dream interpretation. Never offer life advice, coaching, or therapeutic guidance. "
    "Replace any inappropriate or obscene language with respectful synonyms and continue. Always remain in your role as a symbolic interpreter."
    "\n\n# User context\n"
)

# --- –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def log_activity(user, chat_id, action, content=""):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_activity_log (user_id, username, chat_id, action, content)
            VALUES (%s, %s, %s, %s, %s)
        """, (
            user.id,
            f"@{user.username}" if user.username else None,
            chat_id,
            action,
            content[:1000]
        ))
    conn.commit()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = str(update.effective_chat.id)
    user = update.effective_user

    log_activity(user, chat_id, "message", user_message)
    log_activity(user, chat_id, "gpt_request", f"model=gpt-4o, temp=0.4, max_tokens={MAX_TOKENS}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "user", user_message, datetime.now(timezone.utc)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s ORDER BY timestamp DESC LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(rows)]

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute("""
            SELECT gender, age_group, lucid_dreaming FROM user_profile
            WHERE chat_id = %s
        """, (chat_id,))
        profile = cur.fetchone()

    profile_info = ""
    if profile:
        gender, age_group, lucid = profile
        if gender:
            profile_info += f"User gender: {gender}. "
        if age_group:
            profile_info += f"User age group: {age_group}. "
        if lucid:
            profile_info += f"Lucid dream experience: {lucid}. "

    # –°–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
    personalized_prompt = DEFAULT_SYSTEM_PROMPT
    if profile_info:
        personalized_prompt += f"\n\n# User context\n{profile_info.strip()}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç"
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("„Ä∞Ô∏è –†–∞–∑–º—ã—à–ª—è—é...")

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": personalized_prompt}] + history,
            temperature=0.4,
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
        log_activity(user, chat_id, "dream_interpreted", reply[:300])
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "assistant", reply, datetime.now(timezone.utc)))

    await thinking_msg.edit_text(reply, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    log_activity(update.effective_user, str(update.effective_chat.id), "start")

    keyboard = [
        [InlineKeyboardButton("üßæ –ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?", callback_data="start_profile")],
        [InlineKeyboardButton("üîÆ –ß—Ç–æ —è —É–º–µ—é", callback_data="about")],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏", url="https://t.me/dream_sense_chat")],
        [InlineKeyboardButton("üíé –î–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="donate")],
        [InlineKeyboardButton("üåô –†–∞–∑–æ–±—Ä–∞—Ç—å –º–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        with open("intro.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption="üí§ –°–Ω—ã ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏. –≠—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å —Ç–æ–±–æ–π. –ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. –ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è.\n\n–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏? –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –Ω–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—à—å? –ö —á–µ–º—É —Ç—ã –≥–æ—Ç–æ–≤(–∞), —Ö–æ—Ç—è –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å —ç—Ç–æ–≥–æ?\n\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å. –ê —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–æ –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫.",
                
                reply_markup=reply_markup
            )
            
    except FileNotFoundError:
        await update.message.reply_text(
            "üí§ –°–Ω—ã ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏. –≠—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å —Ç–æ–±–æ–π. –ò–Ω–æ–≥–¥–∞ –æ–Ω–æ —à–µ–ø—á–µ—Ç, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. –ù–æ –∑–∞ –∫–∞–∂–¥—ã–º —Å–Ω–æ–º ‚Äì —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ, —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–µ–±—è.\n\n–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏? –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –Ω–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—à—å? –ö —á–µ–º—É —Ç—ã –≥–æ—Ç–æ–≤(–∞), —Ö–æ—Ç—è –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å —ç—Ç–æ–≥–æ?\n\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å. –ê —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–æ –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_activity(update.effective_user, str(update.effective_chat.id), f"button:{query.data}")

    if query.data == "about":
        with open("about.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="–Ø ‚Äì —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —Å–Ω—ã. –ú–æ—è –æ—Å–Ω–æ–≤–∞ ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –º–µ—Ç–æ–¥–∏–∫–∞ –ö–∞—Ä–ª–∞ –Æ–Ω–≥–∞. –ú–Ω–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Å–æ–Ω ‚Äì –¥–∞–∂–µ —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–π ‚Äì –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ—ë –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ.\n\n–Ø –±–µ—Ä–µ–∂–Ω–æ –ø–æ–º–æ–≥–∞—é, –Ω–µ –æ—Å—É–∂–¥–∞—é –∏ –Ω–µ –¥–∞—é –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—é —Å–º—ã—Å–ª–æ–≤. –Ø –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–º ‚Äî —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —á—É—Ç—å –±–ª–∏–∂–µ –ø–æ–¥–æ–π—Ç–∏ –∫ —Å–µ–±–µ, –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∑–Ω–∞–Ω–∏—é, –∫ —Ç–æ–º—É, —á—Ç–æ –æ–±—ã—á–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ç–µ–Ω–∏.\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüåô –¢–æ–ª–∫—É—é —Å–Ω—ã —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –æ–±—Ä–∞–∑—ã, –∞—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Å–∏–º–≤–æ–ª—ã\nüí¨ –£—á–∏—Ç—ã–≤–∞—é —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ ‚Äì –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å–µ—Ä—å—ë–∑–Ω–æ –∏–ª–∏ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é\nü¶Ñ –ú–æ–≥—É –æ–±—Å—É–¥–∏—Ç—å —Å —Ç–æ–±–æ–π —Å–∏–º–≤–æ–ª–∏–∫—É —Å–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\nü™ê–ü–æ –∑–∞–ø—Ä–æ—Å—É ‚Äì —É—á–∏—Ç—ã–≤–∞—é –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ —Å–Ω–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è\nüïäÔ∏è–ì–æ–≤–æ—Ä—é —Å —Ç–æ–±–æ–π –±–µ—Ä–µ–∂–Ω–æ –∏ –ø–æ–º–æ–≥–∞—é –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–æ–Ω, –∫–∞–∫ –Ω–∞ –ø—É—Ç—å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äì –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–π —Å–æ–Ω. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å –∏ –∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å",
                
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
                ])
            )
    
    elif query.data == "donate":
        with open("donate.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üí∏ –°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç! –ú–Ω–µ –µ—â—ë —Ç–∞–∫ –º–Ω–æ–≥–æ–º—É –Ω–∞–¥–æ –Ω–∞—É—á–∏—Ç—å—Å—è!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url="https://pay.cloudtips.ru/p/4f1dd4bf")]
                    #[InlineKeyboardButton("–ö–æ—Ñ–µ —Å —Ç–æ—Ä—Ç–∏–∫–æ–º (500 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=500")],
                    #[InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (1000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=1000")],
                    #[InlineKeyboardButton("–ë–æ–ª—å—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (2000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=2000")],
                    #[InlineKeyboardButton("–û–≥—Ä–æ–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (5000 ‚ÇΩ)", url="https://yoomoney.ru/to/XXXXXXXX?amount=5000")]
                ])
            )

    elif query.data == "start_profile":
        with open("quiz.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="üßæ –í—Å–µ–≥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –ª—É—á—à–µ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Å–Ω—ã.\n\n–ù–∞—á–Ω—ë–º?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞—á–∏–Ω–∞–µ–º", callback_data="profile_step:gender")],
                    [InlineKeyboardButton("–î–∞–≤–∞–π –Ω–µ —Å–µ–π—á–∞—Å", callback_data="profile_step:skip")]
                ])
            )

    elif query.data == "profile_step:gender":
        context.user_data['profile_step'] = "gender"
        await query.message.reply_text(
            "–°–∏–º–≤–æ–ª–∏–∫–∞ —Å–Ω–æ–≤ —É –∂–µ–Ω—â–∏–Ω –∏ –º—É–∂—á–∏–Ω –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –¢—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender:female")],
                [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="gender:male")],
                [InlineKeyboardButton("–ù–µ —Å–∫–∞–∂—É", callback_data="gender:other")]
            ])
        )

    elif query.data == "profile_step:skip":
        await query.message.reply_text("–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∫–µ—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")

    elif query.data.startswith("gender:"):
        gender = query.data.split(":")[1]
        context.user_data['gender'] = gender
        context.user_data['profile_step'] = "age"

        await query.message.reply_text(
            "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∂–µ –≤–∞–∂–µ–Ω –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ 18", callback_data="age:<18")],
                [InlineKeyboardButton("18‚Äì30", callback_data="age:18-30")],
                [InlineKeyboardButton("31‚Äì50", callback_data="age:31-50")],
                [InlineKeyboardButton("50+", callback_data="age:50+")]
            ])
        )

    elif query.data.startswith("age:"):
        age = query.data.split(":")[1]
        context.user_data['age_group'] = age
        context.user_data['profile_step'] = "lucid"

        await query.message.reply_text(
            "–ë—ã–≤–∞—é—Ç –ª–∏ —É —Ç–µ–±—è –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω—ã (–ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Å–ø–∏—à—å –∏ –º–æ–∂–µ—à—å –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –≤–æ —Å–Ω–µ)?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–∞—Å—Ç–æ", callback_data="lucid:—á–∞—Å—Ç–æ")],
                [InlineKeyboardButton("–ò–Ω–æ–≥–¥–∞", callback_data="lucid:–∏–Ω–æ–≥–¥–∞")],
                [InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞", callback_data="lucid:–Ω–∏–∫–æ–≥–¥–∞")]
            ])
        )

    elif query.data.startswith("lucid:"):
        lucid = query.data.split(":")[1]
        context.user_data['lucid_dreaming'] = lucid
        context.user_data['profile_step'] = None

        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO user_profile (chat_id, username, gender, age_group, lucid_dreaming, updated_at)
                VALUES (%s, %s, %s, %s, %s, now())
                ON CONFLICT (chat_id) DO UPDATE
                SET gender = EXCLUDED.gender,
                    age_group = EXCLUDED.age_group,
                    lucid_dreaming = EXCLUDED.lucid_dreaming,
                    updated_at = now()
            """, (
                str(update.effective_chat.id),
                f"@{update.effective_user.username}" if update.effective_user.username else None,
                context.user_data.get('gender'),
                context.user_data.get('age_group'),
                lucid
            ))
        conn.commit()

        await query.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ!\n–¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–Ω–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω", callback_data="start_first_dream")]
        ])
    )
        
    elif query.data == "start_first_dream":
        await query.message.reply_text(
        "‚ú® –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π, –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ –ø—É–≥–∞—é—â–∏–π ‚Äì —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—à—å. –û–ø–∏—à–∏, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —É—á—ë–ª –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏ ‚Äì —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ —Å–Ω–∞ (–º–æ–∂–Ω–æ –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É –∫—Ä—É–ø–Ω–æ–º—É –≥–æ—Ä–æ–¥—É)\n\n–ù–∞—á–Ω—ë–º?"
    )


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
