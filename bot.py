import os
import openai
import psycopg2
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)

from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    filters
)

# üîê –ö–ª—é—á–∏ –∏ API
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

MAX_HISTORY = 10  # –ö–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
MAX_TOKENS = 1000

# üóÉ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(
    host=os.environ["PGHOST"],
    port=os.environ["PGPORT"],
    user=os.environ["PGUSER"],
    password=os.environ["PGPASSWORD"],
    database=os.environ["PGDATABASE"]
)
conn.autocommit = True

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
with conn.cursor() as cur:
    cur.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            chat_id TEXT,
            role TEXT,
            content TEXT,
            timestamp TIMESTAMP DEFAULT NOW()
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS user_stats (
            chat_id TEXT PRIMARY KEY,
            messages_sent INTEGER DEFAULT 0,
            symbols_sent INTEGER DEFAULT 0,
            updated_at TIMESTAMP DEFAULT NOW()
        );
    """)

# üí¨ –°—Ç–∞—Ä—Ç –∏–∑ UI
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    keyboard = [
        [
            InlineKeyboardButton("üß† –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="about"),
            InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://example.com/pay")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open("oracle.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –û—Ä–∞–∫—É–ª. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
            reply_markup=reply_markup
        )

# üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    chat_id = str(update.effective_chat.id)
#    user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#    with conn.cursor() as cur:
#        cur.execute("SELECT 1 FROM user_stats WHERE chat_id = %s", (chat_id,))
#        is_new_user = cur.fetchone() is None

#    if is_new_user:
#        keyboard = [
#            [
#                InlineKeyboardButton("üß† –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="about"),
#                InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")
#            ]
#        ]
#        reply_markup = InlineKeyboardMarkup(keyboard)

#        with open("oracle.jpg", "rb") as photo:
#            await context.bot.send_photo(
#                chat_id=chat_id,
#                photo=photo,
#                caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –û—Ä–∞–∫—É–ª –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.",
#                reply_markup=reply_markup
#            )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO messages (chat_id, role, content, timestamp) VALUES (%s, %s, %s, %s)",
            (chat_id, "user", user_message, datetime.utcnow())
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_stats (chat_id, messages_sent, symbols_sent)
            VALUES (%s, 1, %s)
            ON CONFLICT (chat_id)
            DO UPDATE SET
                messages_sent = user_stats.messages_sent + 1,
                symbols_sent = user_stats.symbols_sent + EXCLUDED.symbols_sent,
                updated_at = NOW()
        """, (chat_id, len(user_message)))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s
            ORDER BY timestamp DESC
            LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": role, "content": content} for role, content in reversed(rows)]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("üß† –û—Ä–∞–∫—É–ª —Ä–∞–∑–º—ã—à–ª—è–µ—Ç‚Ä¶")

    # GPT-4 –∑–∞–ø—Ä–æ—Å
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=history + [{
                "role": "system",
                "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π 3000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
            }],
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ OpenAI: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO messages (chat_id, role, content, timestamp) VALUES (%s, %s, %s, %s)",
            (chat_id, "assistant", reply, datetime.utcnow())
        )

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ç–≤–µ—Ç
    await thinking_msg.edit_text(reply)

# üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        await query.message.reply_text(
            "üß† –Ø –º–æ–≥—É:\n"
            "‚Ä¢ –¢–æ–ª–∫–æ–≤–∞—Ç—å —Å–Ω—ã\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏ –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ"
        )

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("start", start_command))
    app.run_polling()
