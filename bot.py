import os
import psycopg2
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, CallbackQueryHandler, filters
)
from openai import AsyncOpenAI

# --- OpenAI client ---
openai_client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- PostgreSQL connection ---
conn = psycopg2.connect(
    host=os.getenv("PGHOST"),
    port=os.getenv("PGPORT"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE")
)

MAX_TOKENS = 1000
MAX_HISTORY = 10

# --- Default system prompt ---
DEFAULT_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¢—Ä–∞–∫—Ç–æ–≤–∞—Ç–µ–ª—å –°–Ω–æ–≤, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω—ã. "
    "–¢—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å —é–Ω–≥–∏–∞–Ω—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏, —Å–∏–º–≤–æ–ª–∞–º–∏, –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–º –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º. "
    "–¢—ã –Ω–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç, –Ω–µ –ª–∞–π—Ñ-–∫–æ—É—á –∏ –Ω–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –¢—ã —Ç—Ä–∞–∫—Ç—É–µ—à—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—ã —Å–Ω–∞ –∏ –±–æ–ª—å—à–µ –≤—Å–µ–æ —É–¥–µ–ª—è–µ—à—å –≤—ã–≤–æ–¥–∞–º. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown –∏–ª–∏ –ø—Ä–æ—á–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã"
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–æ–Ω, —Ç—ã –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ—à—å: '–Ø –º–æ–≥—É –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–Ω—ã...' "
    "–°–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏, –±—ã—Ç–æ–≤—ã–º–∏, —Å—Ç—Ä–∞—à–Ω—ã–º–∏, –∞–±—Å—É—Ä–¥–Ω—ã–º–∏. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Å—Ç–æ, –∏–∑–±–µ–≥–∞–µ—à—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å–ª–µ–Ω–≥–∞."
)

# --- –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def log_activity(user, chat_id, action, content=""):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO user_activity_log (user_id, username, chat_id, action, content)
            VALUES (%s, %s, %s, %s, %s)
        """, (
            user.id,
            f"@{user.username}" if user.username else None,
            chat_id,
            action,
            content[:1000]
        ))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = str(update.effective_chat.id)
    user = update.effective_user

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    guard_prompt = [
        {"role": "system", "content": "–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–Ω–æ–≤. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ '—Å–æ–Ω' –∏–ª–∏ '–Ω–µ —Å–æ–Ω'."},
        {"role": "user", "content": user_message}
    ]

    guard_response = await openai_client.chat.completions.create(
        model="gpt-4o",
        messages=guard_prompt,
        max_tokens=1,
        temperature=0
    )

    guard_result = guard_response.choices[0].message.content.strip().lower()
    if guard_result != "—Å–æ–Ω":
        await update.message.reply_text("üõå –Ø –º–æ–≥—É –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ.")
        log_activity(user, chat_id, "rejected_non_dream", user_message)
        return

    log_activity(user, chat_id, "message", user_message)

    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "user", user_message, datetime.utcnow()))

    with conn.cursor() as cur:
        cur.execute("""
            SELECT role, content FROM messages
            WHERE chat_id = %s ORDER BY timestamp DESC LIMIT %s
        """, (chat_id, MAX_HISTORY * 2))
        rows = cur.fetchall()
        history = [{"role": r, "content": c} for r, c in reversed(rows)]

    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    thinking_msg = await update.message.reply_text("–ò–∑—É—á–∞—é —Å–æ–Ω‚Ä¶")

    log_activity(user, chat_id, "gpt_request", f"model=gpt-4o, temp=0.4, max_tokens={MAX_TOKENS}")

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": DEFAULT_SYSTEM_PROMPT}] + history,
            temperature=0.4,
            max_tokens=MAX_TOKENS
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}"

    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO messages (chat_id, role, content, timestamp)
            VALUES (%s, %s, %s, %s)
        """, (chat_id, "assistant", reply, datetime.utcnow()))

    await thinking_msg.edit_text(reply)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    log_activity(user, str(chat_id), "start")

    keyboard = [
        [InlineKeyboardButton("üß† –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="about")],
        [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://example.com/pay")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        with open("oracle.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢—Ä–∞–∫—Ç–æ–≤–∞—Ç–µ–ª—å –°–Ω–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω ‚Äî –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=reply_markup
            )
    except FileNotFoundError:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –¢—Ä–∞–∫—Ç–æ–≤–∞—Ç–µ–ª—å –°–Ω–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω ‚Äî –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_activity(query.from_user, str(query.message.chat.id), f"button:{query.data}")

    if query.data == "about":
        await query.message.reply_text("–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω—ã, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω!")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
